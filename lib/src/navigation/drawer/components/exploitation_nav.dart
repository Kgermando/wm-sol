
import 'package:auto_size_text/auto_size_text.dart';
import 'package:badges/badges.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:wm_solution/src/controllers/departement_notify_controller.dart';
import 'package:wm_solution/src/models/users/user_model.dart';
import 'package:wm_solution/src/navigation/drawer/drawer_widget.dart';  
import 'package:wm_solution/src/routes/routes.dart';

class ExploitationNav extends StatefulWidget {
  const ExploitationNav(
      {super.key,
      required this.currentRoute,
      required this.user,
      required this.departementList,
      required this.controller});
  final String currentRoute;
  final UserModel user;
 final List<dynamic> departementList;
 final DepartementNotifyCOntroller controller;

  @override
  State<ExploitationNav> createState() => _ExploitationNavState();
}

class _ExploitationNavState extends State<ExploitationNav> { 
  bool isOpen = false;
  bool isOpen2 = false;
  bool isOpen3 = false;

  @override
  Widget build(BuildContext context) {
   final bodyMedium = Theme.of(context).textTheme.bodyLarge;
  final bodyText1 = Theme.of(context).textTheme.bodyMedium; 
    int userRole = int.parse(widget.user.role);
    
    return ExpansionTile(
      leading: const Icon(Icons.widgets, size: 30.0),
      title: AutoSizeText('Exploitations', maxLines: 1, style: bodyMedium),
      initiallyExpanded:
          widget.departementList.contains('Exploitations')
              ? true
              : false,
      onExpansionChanged: (val) {
        setState(() {
          isOpen = !val;
        });
      },
      trailing: const Icon(Icons.arrow_drop_down),
      children: [
        if (userRole <= 2)
          DrawerWidget(
              selected: widget.currentRoute == ExploitationRoutes.expDashboard,
              icon: Icons.dashboard,
              sizeIcon: 20.0,
              title: 'Dashboard',
              style: bodyText1!,
              onTap: () {
                Get.toNamed(ExploitationRoutes.expDashboard);
              }),
        if (widget.departementList.contains('Exploitations') && userRole <= 2)
          DrawerWidget(
              selected: widget.currentRoute == ExploitationRoutes.expDD,
              icon: Icons.manage_accounts,
              sizeIcon: 20.0,
              title: 'Directeur de departement',
              style: bodyText1!,
              badge: Badge(
                showBadge: (int.parse(widget.controller.itemExploitationCount) >= 1) ? true : false,
                badgeColor: Colors.teal,
                badgeContent: Obx(() => Text(widget.controller.itemExploitationCount,
                    style:
                        const TextStyle(fontSize: 10.0, color: Colors.white))) ,
                child: const Icon(Icons.notifications),
              ),
              onTap: () {
                Get.toNamed(ExploitationRoutes.expDD);
              }),
        ExpansionTile(
          leading: const Icon(Icons.work_outlined, size: 20.0),
          title: Text('Projets', style: bodyText1),
          initiallyExpanded: false,
          onExpansionChanged: (val) {
            setState(() {
              isOpen2 = !val;
            });
          },
          children: [
            DrawerWidget(
                selected: widget.currentRoute == ExploitationRoutes.expProjet,
                icon: Icons.feed,
                sizeIcon: 15.0,
                title: 'Projets',
                style: bodyText1!,
                onTap: () {
                  Get.toNamed(ExploitationRoutes.expProjet);
                }),
            DrawerWidget(
                selected: widget.currentRoute == TacheRoutes.tachePage,
                icon: Icons.content_paste_sharp,
                sizeIcon: 15.0,
                title: 'Taches',
                style: bodyText1,
                onTap: () {
                  Navigator.pushNamed(context, TacheRoutes.tachePage);
                  // Navigator.of(context).pop();
                }),
            DrawerWidget(
                selected:
                    widget.currentRoute == ExploitationRoutes.expVersement,
                icon: Icons.monetization_on,
                sizeIcon: 15.0,
                title: 'Versements',
                style: bodyText1,
                onTap: () {
                  Get.toNamed(ExploitationRoutes.expVersement);
                }),
          ],
        ),
        ExpansionTile(
          leading: const Icon(Icons.precision_manufacturing, size: 20.0),
          title: Text('Productions', style: bodyText1),
          initiallyExpanded: false,
          onExpansionChanged: (val) {
            setState(() {
              isOpen3 = !val;
            });
          },
          children: [
            DrawerWidget(
                selected: widget.currentRoute == ExploitationRoutes.expProd,
                icon: Icons.production_quantity_limits,
                sizeIcon: 15.0,
                title: 'Productions',
                style: bodyText1,
                onTap: () {
                  Get.toNamed(ExploitationRoutes.expProd);
                }),
            DrawerWidget(
                selected:
                    widget.currentRoute == ExploitationRoutes.expFournisseur,
                icon: Icons.fact_check,
                sizeIcon: 15.0,
                title: 'Fournisseurs',
                style: bodyText1,
                onTap: () {
                  Get.toNamed(ExploitationRoutes.expFournisseur);
                }),
          ],
        ),
         
      ],
    );
  }
}
