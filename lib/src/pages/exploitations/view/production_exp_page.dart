import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:wm_solution/src/helpers/network_controller.dart';
import 'package:wm_solution/src/navigation/drawer/drawer_menu.dart';
import 'package:wm_solution/src/navigation/header/header_bar.dart';
import 'package:wm_solution/src/pages/exploitations/components/productions/table_production_exp.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/production_exp_controller.dart';
import 'package:wm_solution/src/widgets/loading.dart';
import 'package:wm_solution/src/widgets/no_network.dart';

class ProductionExpPage extends StatefulWidget {
  const ProductionExpPage({super.key});

  @override
  State<ProductionExpPage> createState() => _ProductionExpPageState();
}

class _ProductionExpPageState extends State<ProductionExpPage> {
  final ProductionExpController controller = Get.find();
  final NetworkController networkController = Get.find();
  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey();
  String title = "Exploitation";
  String subTitle = "Productions";

  @override
  Widget build(BuildContext context) {
    return Obx(() => networkController.connectionStatus.value == 1
      ?  SafeArea(
      child: controller.obx(
            onLoading: loadingPage(context),
            onEmpty: const Text('Aucune donnée'),
            onError: (error) => loadingError(context, error!),
            (data) => Scaffold(
                key: scaffoldKey,
                appBar: headerBar(context, scaffoldKey, title, subTitle),
                drawer: const DrawerMenu(),
                floatingActionButton: FloatingActionButton.extended(
                  label: const Text("nouvelle production"),
                  tooltip: "Ajouter nouvelle production",
                  icon: const Icon(Icons.add),
                  onPressed: () {
                    addNewDialog();
                  },
                ),
                body: Row(
                  children: [
                    Visibility(
                        visible: !Responsive.isMobile(context),
                        child: const Expanded(flex: 1, child: DrawerMenu())),
                    Expanded(
                        flex: 5,
                        child: Container(
                            margin: const EdgeInsets.only(
                                top: p20, right: p20, left: p20, bottom: p8),
                            decoration: const BoxDecoration(
                                borderRadius:
                                    BorderRadius.all(Radius.circular(20))),
                            child: TableProductionExp(
                                productionExpList: controller.productionExpList,
                                controller: controller))),
                  ],
                ))),
        )
        : noNetworkWidget(context));
  }

  addNewDialog() {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) {
            return AlertDialog(
              title: Text('Nouvelle production',
                  style: TextStyle(color: mainColor)),
              content: SizedBox(
                  height: 250,
                  width: 300,
                  child: controller.isLoading
                      ? loading()
                      : Form(
                          key: controller.formKey,
                          child: Column(
                            children: [
                              const SizedBox(height: 20),
                              idProductWidget(),
                              const SizedBox(height: 20),
                              quantityAProduireWidget(),
                            ],
                          ))),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.pop(context, 'Cancel'),
                  child: const Text('Annuler'),
                ),
                TextButton(
                  onPressed: () {
                    final form = controller.formKey.currentState!;
                    if (form.validate()) {
                      controller.submit();
                      form.reset();
                    }
                  },
                  child: const Text('OK'),
                ),
              ],
            );
          });
        });
  }

  Widget idProductWidget() {
    List<String> dataList = [];
    dataList = controller.idProdList.map((e) => e.idProduct).toList();
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Selection Identifiant du produit',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: controller.idProduct,
          isExpanded: true,
          items: dataList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select Identifiant" : null,
          onChanged: (value) {
            setState(() {
              controller.idProduct = value;
            });
          },
        ));
  }

  Widget quantityAProduireWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: controller.quantityAProduireController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité à produire',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }
}
