import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:wm_solution/src/api/exploitations/projets_api.dart';
import 'package:wm_solution/src/models/exploitations/projet_model.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart'; 

class ProjetController extends GetxController
    with StateMixin<List<ProjetModel>> {
  final ProjetsApi projetsApi = ProjetsApi();
  final ProfilController profilController = Get.find();

  var projetList = <ProjetModel>[].obs;

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  final _isLoading = false.obs;
  bool get isLoading => _isLoading.value;

    // Approbations
  final formKeyBudget = GlobalKey<FormState>();

  String approbationDG = '-';
  String approbationBudget = '-';
  String approbationFin = '-';
  String approbationDD = '-';
  TextEditingController motifDGController = TextEditingController();
  TextEditingController motifBudgetController = TextEditingController();
  TextEditingController motifFinController = TextEditingController();
  TextEditingController motifDDController = TextEditingController();
  String? ligneBudgtaire;
  String? ressource;


  DateTimeRange? dateRange;

  TextEditingController nomProjetController = TextEditingController();
  TextEditingController coutProjetController = TextEditingController();
  TextEditingController responsableController = TextEditingController();
  TextEditingController objectifsController = TextEditingController();
  TextEditingController descriptionController = TextEditingController();
  TextEditingController resourcesController = TextEditingController();
  TextEditingController responsabiliteController = TextEditingController();
  TextEditingController communicationController = TextEditingController();
  TextEditingController processusVerificationController =
      TextEditingController();
  TextEditingController problemePotientEtRisqueController =
      TextEditingController();
  TextEditingController budgetDetailController = TextEditingController();
  TextEditingController recetteAttendusController = TextEditingController();

  TextEditingController agentController = TextEditingController();
  TextEditingController roleController = TextEditingController();

  String? typeFinancement;
  

  String getPlageDate() {
    if (dateRange == null) {
      return 'Date de Debut et Fin';
    } else {
      return '${DateFormat('dd/MM/yyyy').format(dateRange!.start)} - ${DateFormat('dd/MM/yyyy').format(dateRange!.end)}';
    }
  } 
 
  @override
  void onInit() {
    super.onInit();
    getList();
  }

  @override
  void dispose() {
    nomProjetController.dispose();
    coutProjetController.dispose();
    responsableController.dispose();
    objectifsController.dispose();
    descriptionController.dispose();
    resourcesController.dispose();
    responsabiliteController.dispose();
    communicationController.dispose();
    processusVerificationController.dispose();
    problemePotientEtRisqueController.dispose();
    budgetDetailController.dispose();
    recetteAttendusController.dispose();
    super.dispose();
  }


  void getList() async {
    projetsApi.getAllData().then((response) {
      projetList.assignAll(response);
      change(response, status: RxStatus.success());
    }, onError: (err) {
      change(null, status: RxStatus.error(err.toString()));
    });
  }

  detailView(int id) async {
    final data = await projetsApi.getOneData(id);
    return data;
  }

  void deleteData(int id) async {
    try {
      _isLoading.value = true;
      await projetsApi.deleteData(id).then((value) {
        projetList.clear();
        getList();
        // Get.back();
        Get.snackbar("Supprimé avec succès!", "Cet élément a bien été supprimé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

    void submit() async {
    try {
      _isLoading.value = true;
       final projetModel = ProjetModel(
          nomProjet: nomProjetController.text,
          coutProjet: coutProjetController.text,
          responsable: responsableController.text,
          objectifs: objectifsController.text,
          description: descriptionController.text,
          responsabilite: responsabiliteController.text,
          communication: communicationController.text,
          processusVerification: processusVerificationController.text,
          problemePotientEtRisque: problemePotientEtRisqueController.text,
          dateDebutEtFin:
              "Du ${DateFormat('dd/MM/yyyy').format(dateRange!.start)} - Au ${DateFormat('dd/MM/yyyy').format(dateRange!.end)}",
          budgetDetail: budgetDetailController.text,
          recetteAttendus: recetteAttendusController.text,
          typeFinancement: typeFinancement.toString(),
          observation: 'false',
          signature: profilController.user.matricule,
          createdRef: DateTime.now(),
          created: DateTime.now(),
          approbationDG: '-',
          motifDG: '-',
          signatureDG: '-',
          approbationBudget: '-',
          motifBudget: '-',
          signatureBudget: '-',
          approbationFin: '-',
          motifFin: '-',
          signatureFin: '-',
          approbationDD: '-',
          motifDD: '-',
          signatureDD: '-',
          ligneBudgetaire: '-',
          ressource: '-');
      await projetsApi.updateData(projetModel).then((value) {
        projetList.clear();
        getList();
        Get.back();
        Get.snackbar("Observation effectuée avec succès!",
            "Le document a bien été soumis",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur lors de la soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }


 
  void submitObservation(ProjetModel data, String obs) async {
    try {
      _isLoading.value = true;
      final projetModel = ProjetModel(
          id: data.id,
          nomProjet: data.nomProjet,
          coutProjet: data.coutProjet,
          responsable: data.responsable,
          objectifs: data.objectifs,
          description: data.description,
          responsabilite: data.responsabilite,
          communication: data.communication,
          processusVerification: data.processusVerification,
          problemePotientEtRisque: data.problemePotientEtRisque,
          dateDebutEtFin: data.dateDebutEtFin,
          budgetDetail: data.budgetDetail,
          recetteAttendus: data.recetteAttendus,
          typeFinancement: data.typeFinancement,
          observation: obs,
          signature: data.signature,
          createdRef: data.createdRef,
          created: data.created,
          approbationDG: data.approbationDG,
          motifDG: data.motifDG,
          signatureDG: data.signatureDG,
          approbationBudget: data.approbationBudget,
          motifBudget: data.motifBudget,
          signatureBudget: data.signatureBudget,
          approbationFin: data.approbationFin,
          motifFin: data.motifFin,
          signatureFin: data.signatureFin,
          approbationDD: data.approbationDD,
          motifDD: data.motifDD,
          signatureDD: data.signatureDD,
          ligneBudgetaire: data.ligneBudgetaire,
          ressource: data.ressource);
      await projetsApi.updateData(projetModel).then((value) {
        projetList.clear();
        getList();
        Get.back();
        Get.snackbar("Observation effectuée avec succès!",
            "Le document a bien été soumis",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur lors de la soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }


  void submitDG(ProjetModel data) async {
    try {
      _isLoading.value = true;
      final projetModel = ProjetModel(
          id: data.id,
          nomProjet: data.nomProjet,
          coutProjet: data.coutProjet,
          responsable: data.responsable,
          objectifs: data.objectifs,
          description: data.description,
          responsabilite: data.responsabilite,
          communication: data.communication,
          processusVerification: data.processusVerification,
          problemePotientEtRisque: data.problemePotientEtRisque,
          dateDebutEtFin: data.dateDebutEtFin,
          budgetDetail: data.budgetDetail,
          recetteAttendus: data.recetteAttendus,
          typeFinancement: data.typeFinancement,
          observation: data.observation,
          signature: data.signature,
          createdRef: data.createdRef,
          created: data.created,
          approbationDG: approbationDG,
          motifDG:
              (motifDGController.text == '') ? '-' : motifDGController.text,
          signatureDG: profilController.user.matricule,
          approbationBudget: '-',
          motifBudget: '-',
          signatureBudget: '-',
          approbationFin: '-',
          motifFin: '-',
          signatureFin: '-',
          approbationDD: data.approbationDD,
          motifDD: data.motifDD,
          signatureDD: data.signatureDD,
          ligneBudgetaire: '-',
          ressource: '-');
      await projetsApi.updateData(projetModel).then((value) {
        projetList.clear();
        getList();
        Get.back();
        Get.snackbar("Effectuée avec succès!", "Le document a bien été soumis",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur lors de la soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitDD(ProjetModel data) async {
    try {
      _isLoading.value = true;
      final projetModel = ProjetModel(
          id: data.id,
          nomProjet: data.nomProjet,
          coutProjet: data.coutProjet,
          responsable: data.responsable,
          objectifs: data.objectifs,
          description: data.description,
          responsabilite: data.responsabilite,
          communication: data.communication,
          processusVerification: data.processusVerification,
          problemePotientEtRisque: data.problemePotientEtRisque,
          dateDebutEtFin: data.dateDebutEtFin,
          budgetDetail: data.budgetDetail,
          recetteAttendus: data.recetteAttendus,
          typeFinancement: data.typeFinancement,
          observation: data.observation,
          signature: data.signature,
          createdRef: data.createdRef,
          created: data.created,
          approbationDG: '-',
          motifDG: '-',
          signatureDG: '-',
          approbationBudget: '-',
          motifBudget: '-',
          signatureBudget: '-',
          approbationFin: '-',
          motifFin: '-',
          signatureFin: '-',
          approbationDD: approbationDD,
          motifDD:
              (motifDDController.text == '') ? '-' : motifDDController.text,
          signatureDD: profilController.user.matricule,
          ligneBudgetaire: '-',
          ressource: '-');
      await projetsApi.updateData(projetModel).then((value) {
        projetList.clear();
        getList();
        Get.back();
        Get.snackbar("Effectuée avec succès!", "Le document a bien été soumis",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur lors de la soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitBudget(ProjetModel data) async {
    try {
      _isLoading.value = true;
      final projetModel = ProjetModel(
          id: data.id,
          nomProjet: data.nomProjet,
          coutProjet: data.coutProjet,
          responsable: data.responsable,
          objectifs: data.objectifs,
          description: data.description,
          responsabilite: data.responsabilite,
          communication: data.communication,
          processusVerification: data.processusVerification,
          problemePotientEtRisque: data.problemePotientEtRisque,
          dateDebutEtFin: data.dateDebutEtFin,
          budgetDetail: data.budgetDetail,
          recetteAttendus: data.recetteAttendus,
          typeFinancement: data.typeFinancement,
          observation: data.observation,
          signature: data.signature,
          createdRef: data.createdRef,
          created: data.created,
          approbationDG: data.approbationDG,
          motifDG: data.motifDG,
          signatureDG: data.signatureDG,
          approbationBudget: approbationBudget,
          motifBudget: (motifBudgetController.text == '')
              ? '-'
              : motifBudgetController.text,
          signatureBudget: profilController.user.matricule,
          approbationFin: '-',
          motifFin: '-',
          signatureFin: '-',
          approbationDD: data.approbationDD,
          motifDD: data.motifDD,
          signatureDD: data.signatureDD,
          ligneBudgetaire: (ligneBudgtaire.toString() == '')
              ? '-'
              : ligneBudgtaire.toString(),
          ressource: (ressource.toString() == '') ? '-' : ressource.toString());
      await projetsApi.updateData(projetModel).then((value) {
        projetList.clear();
        getList();
        Get.back();
        Get.snackbar("Effectuée avec succès!", "Le document a bien été soumis",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur lors de la soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  Future<void> submitFin(ProjetModel data) async {
    try {
      final projetModel = ProjetModel(
          id: data.id,
          nomProjet: data.nomProjet,
          coutProjet: data.coutProjet,
          responsable: data.responsable,
          objectifs: data.objectifs,
          description: data.description,
          responsabilite: data.responsabilite,
          communication: data.communication,
          processusVerification: data.processusVerification,
          problemePotientEtRisque: data.problemePotientEtRisque,
          dateDebutEtFin: data.dateDebutEtFin,
          budgetDetail: data.budgetDetail,
          recetteAttendus: data.recetteAttendus,
          typeFinancement: data.typeFinancement,
          observation: data.observation,
          signature: data.signature,
          createdRef: data.createdRef,
          created: data.created,
          approbationDG: data.approbationDG,
          motifDG: data.motifDG,
          signatureDG: data.signatureDG,
          approbationBudget: data.approbationBudget,
          motifBudget: data.motifBudget,
          signatureBudget: data.signatureBudget,
          approbationFin: approbationFin,
          motifFin:
              (motifFinController.text == '') ? '-' : motifFinController.text,
          signatureFin: profilController.user.matricule,
          approbationDD: data.approbationDD,
          motifDD: data.motifDD,
          signatureDD: data.signatureDD,
          ligneBudgetaire: data.ligneBudgetaire,
          ressource: data.ressource);
      await projetsApi.updateData(projetModel).then((value) {
        projetList.clear();
        getList();
        Get.back();
        Get.snackbar("Effectuée avec succès!", "Le document a bien été soumis",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur lors de la soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }
}
