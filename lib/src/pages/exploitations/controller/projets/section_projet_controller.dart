import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_quill/flutter_quill.dart';
import 'package:get/get.dart';
import 'package:wm_solution/src/api/exploitations/section_projets_api.dart';
import 'package:wm_solution/src/models/exploitations/projet_model.dart';
import 'package:wm_solution/src/models/exploitations/section_projet_model.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';

class SectionProjetController extends GetxController
    with StateMixin<List<SectionProjetModel>> {
  final SectionProjetsApi sectionProjetsApi = SectionProjetsApi();

  final ProfilController profilController = Get.find();

  List<SectionProjetModel> sectionProjetList = [];

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  final _isLoading = false.obs;
  bool get isLoading => _isLoading.value;
 
  QuillController quillControllerRead = QuillController.basic();
  QuillController quillController = QuillController.basic();

  final _isVisible = false.obs;
  bool get isVisible => _isVisible.value;

    @override
    void onInit() {
      super.onInit();
      getList();
    }

    @override
    void dispose() { 
      quillControllerRead.dispose();
     quillController.dispose();
      super.dispose();
    }

    void clear() {
      quillControllerRead.clear();
      quillController.clear();
    }

  void getList() async {
    await sectionProjetsApi.getAllData().then((response) {
      sectionProjetList.clear();
      sectionProjetList.assignAll(response);
      change(sectionProjetList, status: RxStatus.success());
    }, onError: (err) {
      change(null, status: RxStatus.error(err.toString()));
    });
  }

  detailView(int id) async {
    final data = await sectionProjetsApi.getOneData(id);
    return data;
  }

  void showSectionField() {
    _isVisible.value = !_isVisible.value;
  }

  void deleteData(int id) async {
    try {
      _isLoading.value = true;
      await sectionProjetsApi.deleteData(id).then((value) {
        sectionProjetList.clear();
        getList();
        Get.snackbar("Supprimé avec succès!", "Cet élément a bien été supprimé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submit(ProjetModel data) async {
    var json = jsonEncode(quillController.document.toDelta().toJson());
    try {
      _isLoading.value = true;
      final dataItem = SectionProjetModel(
          nomProjet: data.nomProjet,
          reference: data.id!,
          section: '-',
          detail: json, // detailController.text,
          signature: profilController.user.matricule,
          created: DateTime.now());
      await sectionProjetsApi.insertData(dataItem).then((value) {
        clear();
        sectionProjetList.clear();
        getList();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegadé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitUpdate(SectionProjetModel data) async {
    var json = jsonEncode(quillController.document.toDelta().toJson());
    try {
      _isLoading.value = true;
      final dataItem = SectionProjetModel(
        id: data.id,
        nomProjet: data.nomProjet,
        reference: data.reference,
        section: data.section,
        detail: json, // detailController.text,
        signature: data.signature,
        created: data.created,
      );
      await sectionProjetsApi.updateData(dataItem).then((value) {
        clear();
        sectionProjetList.clear();
        getList();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegadé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }
}
