import 'package:get/get.dart';
import 'package:wm_solution/src/models/exploitations/projet_model.dart';
import 'package:wm_solution/src/models/exploitations/versement_projet_model.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/production_exp_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/projets/projet_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/versements/versement_controller.dart';

class DashboardExpController extends GetxController {
  final ProjetController projetController = Get.find();
  final ProductionExpController productionExpController = Get.put(ProductionExpController());
  final VersementController versementController = Get.put(VersementController());

  List<ProjetModel> projetList = [];
  List<VersementProjetModel> versementList = [];
  
  final _projetsCount = 0.obs;
  int get projetsCount => _projetsCount.value;

  final _projetsApprouveCount = 0.obs;
  int get projetsApprouveCount => _projetsApprouveCount.value;

  final _productionsApprouveCount = 0.obs;
  int get productionsApprouveCount => _productionsApprouveCount.value;

  final _coutProjetsTotal = 0.0.obs;
  double get coutProjetsTotal => _coutProjetsTotal.value;

  final _versementTotal = 0.0.obs;
  double get versementTotal => _versementTotal.value;

  final _recetteAttendusTotal = 0.0.obs;
  double get recetteAttendusTotal => _recetteAttendusTotal.value;

  final _recettePourcent = 0.0.obs;
  double get recettePourcent => _recettePourcent.value;
 

  @override
  void onInit() {
    super.onInit();
    getData();
  }
  

  Future<void> getData() async { 
    var projets = await projetController.projetsApi.getAllData();
    var productions = await productionExpController.productionExpApi.getAllData();
    var versements = await versementController.versementProjetApi.getAllData();
    _projetsCount.value = projets.length;
    _productionsApprouveCount.value = productions
        .where((element) =>
            element.approbationDG == "Approved" &&
            element.approbationDD == "Approved")
        .length;
    _projetsApprouveCount.value = projets
        .where((element) =>
            element.approbationDG == "Approved" &&
            element.approbationDD == "Approved" &&
            element.approbationBudget == "Approved" &&
            element.approbationFin == "Approved")
        .length;

    projetList = projets
        .where((element) =>
            element.approbationDG == "Approved" &&
            element.approbationDD == "Approved" &&
            element.approbationBudget == "Approved" &&
            element.approbationFin == "Approved")
        .toList();
    versementList = versements.toList();

    for (var item in projetList) {
      _coutProjetsTotal.value += double.parse(item.coutProjet);
    }

    for (var item in projetList) {
      _recetteAttendusTotal.value += double.parse(item.recetteAttendus);
    }

    for (var item in versementList) {
      _versementTotal.value += double.parse(item.montantVerser);
    }
    // Pourcentage de recettes
    _recettePourcent.value = versementTotal * 100 / recetteAttendusTotal;
  } 
}
