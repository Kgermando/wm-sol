import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:wm_solution/src/api/exploitations/fournisseurs_api.dart';
import 'package:wm_solution/src/models/exploitations/fourniseur_model.dart';
import 'package:wm_solution/src/models/exploitations/production_model.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';

class FourniseurController extends GetxController
    with StateMixin<List<FournisseurModel>> {
  final FournisseurApi fournisseurApi = FournisseurApi();
  final ProfilController profilController = Get.find();

  var fournisseurList = <FournisseurModel>[].obs;

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  final _isLoading = false.obs;
  bool get isLoading => _isLoading.value;

  TextEditingController quantityController = TextEditingController();
  TextEditingController designationController = TextEditingController();
  TextEditingController prixUnitaireController = TextEditingController();
  String? fournisseur;

  @override
  void onInit() {
    super.onInit();
    getList();
  }

  @override
  void dispose() {
    quantityController.dispose();
    designationController.dispose();
    prixUnitaireController.dispose();
    super.dispose();
  }

  void getList() async {
    await fournisseurApi.getAllData().then((response) {
      fournisseurList.assignAll(response);
      change(fournisseurList, status: RxStatus.success());
    }, onError: (err) {
      change(null, status: RxStatus.error(err.toString()));
    });
  }

  detailView(int id) async {
    final data = await fournisseurApi.getOneData(id);
    return data;
  }

  void deleteData(int id) async {
    try {
      _isLoading.value = true;
      await fournisseurApi.deleteData(id).then((value) {
        fournisseurList.clear();
        getList();
        Get.back();
        Get.snackbar("Supprimé avec succès!", "Cet élément a bien été supprimé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submit(ProductionModel data) async {
    try {
      _isLoading.value = true;
      final fournisseurModel = FournisseurModel(
          reference: data.id!,
          quantity: quantityController.text,
          designation: designationController.text,
          prixUnitaire: prixUnitaireController.text,
          fournisseur: fournisseur.toString(),
          signature: profilController.user.matricule,
          created: DateTime.now());
      await fournisseurApi.insertData(fournisseurModel).then((value) {
        fournisseurList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegader",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitUpdate(FournisseurModel data) async {
    try {
      _isLoading.value = true;
      final fournisseurModel = FournisseurModel(
          reference: data.id!,
          quantity: quantityController.text,
          designation: designationController.text,
          prixUnitaire: prixUnitaireController.text,
          fournisseur: fournisseur.toString(),
          signature: profilController.user.matricule,
          created: data.created);
      await fournisseurApi.updateData(fournisseurModel).then((value) {
        fournisseurList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegader",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }
}
