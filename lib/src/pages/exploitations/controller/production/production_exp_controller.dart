import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:wm_solution/src/api/commerciale/commercial/stock_global_api.dart';
import 'package:wm_solution/src/api/exploitations/production_exp_api.dart';
import 'package:wm_solution/src/models/charts/chart_multi.dart';
import 'package:wm_solution/src/models/commercial/prod_model.dart';
import 'package:wm_solution/src/models/commercial/stocks_global_model.dart';
import 'package:wm_solution/src/models/exploitations/production_model.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';
import 'package:wm_solution/src/pages/commercial/controller/commercials/produit_model/produit_model_controller.dart';

class ProductionExpController extends GetxController
    with StateMixin<List<ProductionModel>> {
  final ProductionExpApi productionExpApi = ProductionExpApi();
  final StockGlobalApi stockGlobalApi = StockGlobalApi();
  final ProduitModelController produitModelController =
      Get.put(ProduitModelController());
  final ProfilController profilController = Get.find();

  List<ProductionModel> productionExpList = [];
  var chartProductionList = <ChartProductionModel>[].obs;

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  final _isLoading = false.obs;
  bool get isLoading => _isLoading.value;

  final GlobalKey<FormState> formStockGlobalKey = GlobalKey<FormState>();
  final _isLoadingStockGlobal = false.obs;
  bool get isLoadingStockGlobal => _isLoadingStockGlobal.value;

  List<ProductModel> idProdList = [];
  List<StocksGlobalMOdel> stocksGlobalList = [];

  int numProduction = 0;
  String? idProduct;
  TextEditingController quantityAProduireController = TextEditingController();
  String? statusProd;
  TextEditingController quantityBonneController = TextEditingController();
  TextEditingController quantityMauvaiseController = TextEditingController();
  TextEditingController coutProductionController = TextEditingController();

  // Approbations
  final formKeyBudget = GlobalKey<FormState>();

  String approbationDG = '-';
  String approbationDD = '-';
  TextEditingController motifDGController = TextEditingController();
  TextEditingController motifDDController = TextEditingController();


  // Stocks global ;
  TextEditingController priceAchatUnitController = TextEditingController();
  TextEditingController prixVenteUnitController = TextEditingController();
  TextEditingController tvaController = TextEditingController();

  @override
  void onInit() {
    super.onInit();
    getList();
    getData();
    chart();
  }

  @override
  void dispose() {
    quantityAProduireController.dispose();
    quantityBonneController.dispose();
    quantityMauvaiseController.dispose();
    coutProductionController.dispose();
    motifDGController.dispose();
    motifDDController.dispose();
    super.dispose();
  }

  void clear() {
    idProduct == null;
    statusProd == null;
    quantityAProduireController.clear();
    quantityBonneController.clear();
    quantityMauvaiseController.clear();
    coutProductionController.clear();
    motifDGController.clear();
    motifDDController.clear();
  }

  Future<void> getData() async {
    var produitModel =
        await produitModelController.produitModelApi.getAllData();
    idProdList = produitModel
        .where((element) => element.approbationDD == "Approved")
        .toList();
  }

  void getList() async {
    await productionExpApi.getAllData().then((response) {
      productionExpList.clear();
      productionExpList.addAll(response);
      change(productionExpList, status: RxStatus.success());
    }, onError: (err) {
      change(null, status: RxStatus.error(err.toString()));
    });

    stockGlobalApi.getAllData().then((value) => stocksGlobalList = value);
  }

  void chart() async {
    productionExpApi.getAllDataChart().then((response) {
      chartProductionList.clear();
      chartProductionList.assignAll(response);
      change(productionExpList, status: RxStatus.success());
    }, onError: (err) {
      change(null, status: RxStatus.error(err.toString()));
    });
  }

  detailView(int id) async {
    final data = await productionExpApi.getOneData(id);
    return data;
  }

  void deleteData(int id) async {
    try {
      _isLoading.value = true;
      await productionExpApi.deleteData(id).then((value) {
        clear();
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Supprimé avec succès!", "Cet élément a bien été supprimé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      _isLoading.value = false;
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submit() async {
    try {
      _isLoading.value = true;
      final productionModel = ProductionModel(
          numProduction: productionExpList.length + 1,
          idProduct: idProduct.toString(),
          quantityAProduire: quantityAProduireController.text,
          quantityBonne: '0',
          quantityMauvaise: '0',
          signature: profilController.user.matricule,
          created: DateTime.now(),
          approbationDG: '-',
          motifDG: '-',
          signatureDG: '-',
          approbationDD: '-',
          motifDD: '-',
          signatureDD: '-',
          status: 'En attente');
      await productionExpApi.insertData(productionModel).then((value) {
        clear();
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegadé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      _isLoading.value = false;
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitUpdate(ProductionModel data) async {
    double qtyMauvaise = double.parse(data.quantityAProduire) -
        double.parse(quantityBonneController.text);
    try {
      _isLoading.value = true;
      final productionModel = ProductionModel(
          id: data.id!,
          numProduction: data.numProduction,
          idProduct: data.idProduct,
          quantityAProduire: data.quantityAProduire,
          quantityBonne: (quantityBonneController.text == '')
              ? data.quantityBonne
              : quantityBonneController.text,
          quantityMauvaise: qtyMauvaise.toString(),
          signature: data.signature,
          created: data.created,
          approbationDG: data.approbationDG,
          motifDG: data.motifDG,
          signatureDG: data.signatureDG,
          approbationDD: data.approbationDD,
          motifDD: data.motifDD,
          signatureDD: data.signatureDD,
          status: statusProd.toString());
      await productionExpApi.updateData(productionModel).then((value) {
        clear();
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegadé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      _isLoading.value = false;
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitDG(ProductionModel data) async {
    try {
      _isLoading.value = true;
      final productionModel = ProductionModel(
          id: data.id!,
          numProduction: data.numProduction,
          idProduct: data.idProduct,
          quantityAProduire: data.quantityAProduire,
          quantityBonne: data.quantityBonne,
          quantityMauvaise: data.quantityMauvaise,
          signature: data.signature,
          created: data.created,
          approbationDG: approbationDG,
          motifDG:
              (motifDGController.text == '') ? '-' : motifDGController.text,
          signatureDG: profilController.user.matricule,
          approbationDD: data.approbationDD,
          motifDD: data.motifDD,
          signatureDD: data.signatureDD,
          status: "En cours");
      await productionExpApi.updateData(productionModel).then((value) {
        clear();
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegadé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      _isLoading.value = false;
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitDD(ProductionModel data) async {
    try {
      _isLoading.value = true;
      final productionModel = ProductionModel(
          id: data.id!,
          numProduction: data.numProduction,
          idProduct: data.idProduct,
          quantityAProduire: data.quantityAProduire,
          quantityBonne: data.quantityBonne,
          quantityMauvaise: data.quantityMauvaise,
          signature: data.signature,
          created: data.created,
          approbationDG: '-',
          motifDG: '-',
          signatureDG: '-',
          approbationDD: approbationDD,
          motifDD:
              (motifDDController.text == '') ? '-' : motifDDController.text,
          signatureDD: profilController.user.matricule,
          status: data.status);
      await productionExpApi.updateData(productionModel).then((value) {
        clear();
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegadé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      _isLoading.value = false;
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitQtyBonne(ProductionModel data) async {
    try {
      _isLoadingStockGlobal.value = true;
      var unite = data.idProduct.split('-').last;
       var stockGlobalList = stocksGlobalList
          .where((element) => element.idProduct == data.idProduct)
          .toList();
      if (stockGlobalList.isNotEmpty) {
        StocksGlobalMOdel stocksGlobalMOdel = stockGlobalList.first;
        final dataItem = StocksGlobalMOdel(
            id: stocksGlobalMOdel.id,
            idProduct: data.idProduct,
            quantity: data.quantityBonne,
            quantityAchat: data.quantityBonne,
            priceAchatUnit: priceAchatUnitController.text,
            prixVenteUnit: prixVenteUnitController.text,
            unite: stocksGlobalMOdel.unite,
            modeAchat: stocksGlobalMOdel.modeAchat,
            tva: tvaController.text,
            qtyRavitailler: data.quantityBonne,
            signature: profilController.user.matricule,
            created: DateTime.now());
        await stockGlobalApi.updateData(dataItem).then((value) {
          clear();
          productionExpList.clear();
          getList();
          Get.back();
          Get.snackbar("Soumission effectuée avec succès!",
              "Le document a bien été sauvegadé",
              backgroundColor: Colors.green,
              icon: const Icon(Icons.check),
              snackPosition: SnackPosition.TOP);
          _isLoadingStockGlobal.value = false;
        });
      } else {
          final dataItem = StocksGlobalMOdel(
            idProduct: data.idProduct,
            quantity: data.quantityBonne,
            quantityAchat: data.quantityBonne,
            priceAchatUnit: priceAchatUnitController.text,
            prixVenteUnit: prixVenteUnitController.text,
            unite: unite,
            modeAchat: 'true',
            tva: tvaController.text,
            qtyRavitailler: data.quantityBonne,
            signature: profilController.user.matricule,
            created: DateTime.now());
        await stockGlobalApi.insertData(dataItem).then((value) {
          clear();
          productionExpList.clear();
          getList();
          Get.back();
          Get.snackbar("Soumission effectuée avec succès!",
              "Le document a bien été sauvegadé",
              backgroundColor: Colors.green,
              icon: const Icon(Icons.check),
              snackPosition: SnackPosition.TOP);
          _isLoadingStockGlobal.value = false;
        });
      }
    } catch (e) {
      _isLoadingStockGlobal.value = false;
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  
}
