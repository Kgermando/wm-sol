import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:wm_solution/src/api/exploitations/production_exp_api.dart';
import 'package:wm_solution/src/models/comm_maketing/prod_model.dart';
import 'package:wm_solution/src/models/exploitations/production_model.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';
import 'package:wm_solution/src/pages/commercial_marketing/controller/commercials/produit_model/produit_model_controller.dart';

class ProductionExpController extends GetxController
    with StateMixin<List<ProductionModel>> {
  final ProductionExpApi productionExpApi = ProductionExpApi();
  final ProduitModelController produitModelController =
      Get.put(ProduitModelController());
  final ProfilController profilController = Get.put(ProfilController());

  var productionExpList = <ProductionModel>[].obs;

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  final _isLoading = false.obs;
  bool get isLoading => _isLoading.value;

  List<ProductModel> idProdList = [];
  int numProduction = 0;
  String? idProduct;
  TextEditingController quantityAProduireController = TextEditingController();

  TextEditingController quantityBonneController = TextEditingController();
  TextEditingController quantityMauvaiseController = TextEditingController();
  TextEditingController coutProductionController = TextEditingController();

  // Approbations
  final formKeyBudget = GlobalKey<FormState>();

  String approbationDG = '-';
  String approbationDD = '-';
  TextEditingController motifDGController = TextEditingController();
  TextEditingController motifDDController = TextEditingController();

  @override
  void onInit() {
    super.onInit();
    getList();
  }

  @override
  void dispose() {
    quantityAProduireController.dispose();
    quantityBonneController.dispose();
    quantityMauvaiseController.dispose();
    coutProductionController.dispose();
    motifDGController.dispose();
    motifDDController.dispose();
    super.dispose();
  }

  Future<void> getData() async {
    var produitModel =
        await produitModelController.produitModelApi.getAllData();
    idProdList = produitModel
        .where((element) => element.approbationDD == "Approved")
        .toList();
  }

  void getList() async {
    await productionExpApi.getAllData().then((response) {
      productionExpList.assignAll(response);
      change(productionExpList, status: RxStatus.success());
    }, onError: (err) {
      change(null, status: RxStatus.error(err.toString()));
    });
  }

  detailView(int id) async {
    final data = await productionExpApi.getOneData(id);
    return data;
  }

  void deleteData(int id) async {
    try {
      _isLoading.value = true;
      await productionExpApi.deleteData(id).then((value) {
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Supprimé avec succès!", "Cet élément a bien été supprimé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submit() async {
    try {
      _isLoading.value = true;
      final productionModel = ProductionModel(
          numProduction: productionExpList.length + 1,
          idProduct: idProduct.toString(),
          quantityAProduire: quantityAProduireController.text,
          quantityBonne: '0',
          quantityMauvaise: '0',
          coutProduction: '0',
          signature: profilController.user.matricule,
          created: DateTime.now(),
          approbationDG: '-',
          motifDG: '-',
          signatureDG: '-',
          approbationDD: '-',
          motifDD: '-',
          signatureDD: '-');
      await productionExpApi.insertData(productionModel).then((value) {
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegader",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitUpdate(ProductionModel data) async {
    try {
      _isLoading.value = true;
      final productionModel = ProductionModel(
          id: data.id!,
          numProduction: data.numProduction,
          idProduct: data.idProduct,
          quantityAProduire: data.quantityAProduire,
          quantityBonne: quantityBonneController.text,
          quantityMauvaise: quantityMauvaiseController.text,
          coutProduction: coutProductionController.text,
          signature: profilController.user.matricule,
          created: DateTime.now(),
          approbationDG: '-',
          motifDG: '-',
          signatureDG: '-',
          approbationDD: '-',
          motifDD: '-',
          signatureDD: '-');
      await productionExpApi.updateData(productionModel).then((value) {
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegader",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitDG(ProductionModel data) async {
    try {
      _isLoading.value = true;
      final productionModel = ProductionModel(
        id: data.id!,
        numProduction: data.numProduction,
        idProduct: data.idProduct,
        quantityAProduire: data.quantityAProduire,
        quantityBonne: quantityBonneController.text,
        quantityMauvaise: quantityMauvaiseController.text,
        coutProduction: coutProductionController.text,
        signature: profilController.user.matricule,
        created: DateTime.now(),
        approbationDG: approbationDG,
        motifDG: (motifDGController.text == '') ? '-' : motifDGController.text,
        signatureDG: profilController.user.matricule,
        approbationDD: data.approbationDD,
        motifDD: data.motifDD,
        signatureDD: data.signatureDD,
      );
      await productionExpApi.updateData(productionModel).then((value) {
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegader",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitDD(ProductionModel data) async {
    try {
      _isLoading.value = true;
      final productionModel = ProductionModel(
        id: data.id!,
        numProduction: data.numProduction,
        idProduct: data.idProduct,
        quantityAProduire: data.quantityAProduire,
        quantityBonne: quantityBonneController.text,
        quantityMauvaise: quantityMauvaiseController.text,
        coutProduction: coutProductionController.text,
        signature: profilController.user.matricule,
        created: DateTime.now(),
        approbationDG: '-',
        motifDG: '-',
        signatureDG: '-',
        approbationDD: approbationDD,
        motifDD: (motifDDController.text == '') ? '-' : motifDDController.text,
        signatureDD: profilController.user.matricule,
      );
      await productionExpApi.updateData(productionModel).then((value) {
        productionExpList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegader",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }
}
