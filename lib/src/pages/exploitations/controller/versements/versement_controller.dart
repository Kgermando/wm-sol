import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:wm_solution/src/api/exploitations/versement_projet_api.dart';
import 'package:wm_solution/src/models/exploitations/projet_model.dart';
import 'package:wm_solution/src/models/exploitations/versement_projet_model.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';

class VersementController extends GetxController
    with StateMixin<List<VersementProjetModel>> {
  final VersementProjetApi versementProjetApi = VersementProjetApi();
  final ProfilController profilController = Get.find();

  var versementProjetList = <VersementProjetModel>[].obs;

  final GlobalKey<FormState> formKey = GlobalKey<FormState>();
  final _isLoading = false.obs;
  bool get isLoading => _isLoading.value;

  TextEditingController pieceJustificativeController = TextEditingController();
  TextEditingController montantVerserController = TextEditingController();
  TextEditingController montantEnLettreController = TextEditingController();

  String? typeVersement;

  @override
  void onInit() {
    super.onInit();
    getList();
  }

  @override
  void dispose() {
    pieceJustificativeController.dispose();
    montantVerserController.dispose();
    montantEnLettreController.dispose();
    super.dispose();
  }

  void clear() {
    pieceJustificativeController.clear();
    montantVerserController.clear();
    montantEnLettreController.clear();
  }

  void getList() async {
    await versementProjetApi.getAllData().then((response) {
      versementProjetList.assignAll(response);
      change(versementProjetList, status: RxStatus.success());
    }, onError: (err) {
      change(null, status: RxStatus.error(err.toString()));
    });
  }

  detailView(int id) async {
    final data = await versementProjetApi.getOneData(id);
    return data;
  }

  void deleteData(int id) async {
    try {
      _isLoading.value = true;
      await versementProjetApi.deleteData(id).then((value) {
        versementProjetList.clear();
        getList();
        Get.back();
        Get.snackbar("Supprimé avec succès!", "Cet élément a bien été supprimé",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submit(ProjetModel data) async {
    try {
      _isLoading.value = true;
      final dataItem = VersementProjetModel(
          nomProjet: data.nomProjet,
          pieceJustificative: pieceJustificativeController.text,
          montantVerser: montantVerserController.text,
          montantEnLettre: montantEnLettreController.text,
          typeVersement: typeVersement.toString(),
          signature: profilController.user.matricule,
          created: DateTime.now(),
          reference: data.id!);
      await versementProjetApi.insertData(dataItem).then((value) {
        clear();
        versementProjetList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegader",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }

  void submitUpdate(VersementProjetModel data) async {
    try {
      _isLoading.value = true;
      final dataItem = VersementProjetModel(
          nomProjet: data.nomProjet,
          pieceJustificative: pieceJustificativeController.text,
          montantVerser: montantVerserController.text,
          montantEnLettre: montantEnLettreController.text,
          typeVersement: typeVersement.toString(),
          signature: profilController.user.matricule,
          created: data.created,
          reference: data.id!);
      await versementProjetApi.updateData(dataItem).then((value) {
        clear();
        versementProjetList.clear();
        getList();
        Get.back();
        Get.snackbar("Soumission effectuée avec succès!",
            "Le document a bien été sauvegader",
            backgroundColor: Colors.green,
            icon: const Icon(Icons.check),
            snackPosition: SnackPosition.TOP);
        _isLoading.value = false;
      });
    } catch (e) {
      Get.snackbar("Erreur de soumission", "$e",
          backgroundColor: Colors.red,
          icon: const Icon(Icons.check),
          snackPosition: SnackPosition.TOP);
    }
  }
}
