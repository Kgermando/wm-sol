import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:wm_solution/src/helpers/network_controller.dart';
import 'package:wm_solution/src/models/exploitations/projet_model.dart';
import 'package:wm_solution/src/navigation/drawer/drawer_menu.dart';
import 'package:wm_solution/src/navigation/header/header_bar.dart';
import 'package:wm_solution/src/pages/exploitations/controller/versements/versement_controller.dart';
import 'package:wm_solution/src/widgets/btn_widget.dart';
import 'package:wm_solution/src/widgets/loading.dart';
import 'package:wm_solution/src/widgets/no_network.dart';
import 'package:wm_solution/src/widgets/responsive_child_widget.dart';
import 'package:wm_solution/src/widgets/title_widget.dart';

class AddVersement extends StatefulWidget {
  const AddVersement({super.key, required this.projetModel});
  final ProjetModel projetModel;

  @override
  State<AddVersement> createState() => _AddVersementState();
}

class _AddVersementState extends State<AddVersement> {
  final VersementController controller = Get.find();
  final NetworkController networkController = Get.find();
  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey();
  String title = "Versement";

  @override
  Widget build(BuildContext context) {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return controller.obx(
            onLoading: loadingPage(context),
            onEmpty: const Text('Aucune donnée'),
            onError: (error) => loadingError(context, error!),
            (state) => Scaffold(
          key: scaffoldKey,
          appBar: headerBar(context, scaffoldKey, title,
              widget.projetModel.nomProjet),
          drawer: const DrawerMenu(),
          body: Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Visibility(
                  visible: !Responsive.isMobile(context),
                  child: const Expanded(flex: 1, child: DrawerMenu())),
              Expanded(
                  flex: 5,
                  child: SingleChildScrollView(
                      controller: ScrollController(),
                      physics: const ScrollPhysics(),
                      child: Container(
                        margin: const EdgeInsets.only(
                            top: p20,
                            bottom: p8,
                            right: p20,
                            left: p20),
                        decoration: const BoxDecoration(
                            borderRadius:
                                BorderRadius.all(Radius.circular(20))),
                        child: Column(
                          children: [
                            Card(
                              child: Padding(
                                padding: const EdgeInsets.all(p20),
                                child: Column(
                                  crossAxisAlignment:
                                      CrossAxisAlignment.start,
                                  children: [
                                    const TitleWidget(
                                        title: "Nouveau Versement"),
                                    const SizedBox(
                                      height: p20,
                                    ),
                                    ResponsiveChildWidget(
                                      child1: Text('Nom Projet :',
                                          textAlign: TextAlign.start,
                                          style: bodyMedium!.copyWith(
                                              fontWeight:
                                                  FontWeight.bold)),
                                      child2: SelectableText(
                                          widget.projetModel.nomProjet,
                                          textAlign: TextAlign.start,
                                          style: bodyMedium),
                                    ),
                                  ],
                                ),
                              ),
                            ),
                            const SizedBox(height: p20),
                            versementWidget()
                          ],
                        ),
                      )))
            ],
          ),
        ));
  }

  Widget versementWidget() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(p20),
        child: Form(
          key: controller.formKey,
          child: Column(
            children: [
              ResponsiveChildWidget(
                child1: montantVerserWidget(),
                child2: montantEnLettreWidget(),
              ),
              ResponsiveChildWidget(
                child1: typeVersementWidget(),
                child2: pieceJustificativeWidget(),
              ),
              const SizedBox(
                height: p20,
              ),
              BtnWidget(
                  title: 'Soumettre',
                  isLoading: controller.isLoading,
                  press: () {
                    final form = controller.formKey.currentState!;
                    if (form.validate()) {
                      controller.submit(widget.projetModel);
                      form.reset();
                    }
                  })
            ],
          ),
        ),
      ),
    );
  }

  Widget pieceJustificativeWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: controller.pieceJustificativeController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Piece Justificative',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget montantVerserWidget() {
    final headline6 = Theme.of(context).textTheme.headline6;
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Expanded(
              flex: 4,
              child: TextFormField(
                controller: controller.montantVerserController,
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0)),
                  labelText: 'Montant à Verser',
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
                inputFormatters: [
                  FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
                ],
                style: const TextStyle(),
                validator: (value) {
                  if (value != null && value.isEmpty) {
                    return 'Ce champs est obligatoire';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            const SizedBox(width: p20),
            Expanded(
                flex: 1,
                child: Text(
                  "\$",
                  style: headline6,
                ))
          ],
        ));
  }

  Widget montantEnLettreWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: controller.montantEnLettreController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Montant en Lettre',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget typeVersementWidget() {
    List<String> dataList = ['Virement', 'caisse'];
    return Container(
      margin: const EdgeInsets.only(bottom: p20),
      child: DropdownButtonFormField<String>(
        decoration: InputDecoration(
          labelText: 'Type de Versement',
          labelStyle: const TextStyle(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
          contentPadding: const EdgeInsets.only(left: 5.0),
        ),
        value: controller.typeVersement,
        isExpanded: true,
        items: dataList.map((String value) {
          return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
          );
        }).toList(),
        onChanged: (value) {
          setState(() {
            controller.typeVersement = value!;
          });
        },
      ),
    );
  }
}
