import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:simple_speed_dial/simple_speed_dial.dart';
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:wm_solution/src/helpers/network_controller.dart';
import 'package:wm_solution/src/models/exploitations/projet_model.dart';
import 'package:wm_solution/src/navigation/drawer/drawer_menu.dart';
import 'package:wm_solution/src/navigation/header/header_bar.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';
import 'package:wm_solution/src/pages/exploitations/components/projets/approbation_projet.dart';
import 'package:wm_solution/src/pages/exploitations/components/projets/projet_pdf.dart';
import 'package:wm_solution/src/pages/exploitations/components/projets/table_personnels_roles_projet.dart';
import 'package:wm_solution/src/pages/exploitations/components/projets/table_taches_projet_detail.dart';
import 'package:wm_solution/src/pages/exploitations/components/versements/table_versement_detail.dart';
import 'package:wm_solution/src/pages/exploitations/controller/projets/projet_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/versements/versement_controller.dart';
import 'package:wm_solution/src/pages/personnels_roles/controller/personnels_roles_controller.dart';
import 'package:wm_solution/src/pages/ressource_humaines/controller/personnels/personnels_controller.dart'; 
import 'package:wm_solution/src/pages/taches/controller/taches_controller.dart';
import 'package:wm_solution/src/routes/routes.dart';
import 'package:wm_solution/src/widgets/btn_widget.dart';
import 'package:wm_solution/src/widgets/loading.dart'; 
import 'package:wm_solution/src/widgets/print_widget.dart';
import 'package:wm_solution/src/widgets/responsive_child3_widget.dart';
import 'package:wm_solution/src/widgets/responsive_child_widget.dart';
import 'package:wm_solution/src/widgets/title_widget.dart';

class DetailProjet extends StatefulWidget {
  const DetailProjet({super.key, required this.projetModel});
  final ProjetModel projetModel;

  @override
  State<DetailProjet> createState() => _DetailProjetState();
}

class _DetailProjetState extends State<DetailProjet> {
  final ProjetController controller = Get.find();
  final PersonnelsController personnelsController = Get.find();
  final TachesController tachesController = Get.find();
  final VersementController versementController = Get.find();
  final PersonnelsRolesController personnelsRolesController = Get.find();
  final ProfilController profilController = Get.find();
  final NetworkController networkController = Get.find();

  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey();
  String title = "Exploitations";

  ScrollController scrollControllerProjetDetail = ScrollController();

  @override
  void initState() {
    scrollControllerProjetDetail.addListener(() {
      if (scrollControllerProjetDetail.position.pixels ==
          scrollControllerProjetDetail.position.maxScrollExtent) {
        widget.projetModel;
      }
    });
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: scaffoldKey,
        appBar: headerBar(
            context, scaffoldKey, title, widget.projetModel.nomProjet),
        drawer: const DrawerMenu(),
        floatingActionButton:
            speedialWidget(tachesController, personnelsRolesController),
        body: versementController.obx(
      onLoading: loadingPage(context),
      onEmpty: const Text('Aucune donnée'),
      onError: (error) => loadingError(context, error!),
      (state) => Row(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Visibility(
                  visible: !Responsive.isMobile(context),
                  child: const Expanded(flex: 1, child: DrawerMenu())),
              Expanded(
                  flex: 5,
                  child: Container(
                    margin: const EdgeInsets.only(
                        top: p20, bottom: p8, right: p20, left: p20),
                    decoration: const BoxDecoration(
                        borderRadius:
                            BorderRadius.all(Radius.circular(20))),
                    child: ListView(
                      controller: controller.scrollController,
                      physics: const ScrollPhysics(),
                      children: [
                        Card(
                          elevation: 3,
                          child: Padding(
                            padding: const EdgeInsets.symmetric(
                                horizontal: p20),
                            child: Column(
                              crossAxisAlignment:
                                  CrossAxisAlignment.start,
                              children: [
                                Row(
                                  mainAxisAlignment:
                                      MainAxisAlignment.spaceBetween,
                                  children: [
                                    if (!Responsive.isMobile(context))
                                      TitleWidget(
                                          title: widget
                                              .projetModel.nomProjet),
                                    Column(
                                      children: [
                                        Row(
                                          children: [
                                            if (widget.projetModel.approbationDG == "Unapproved" ||
                                                widget.projetModel
                                                        .approbationDD ==
                                                    "Unapproved" ||
                                                widget.projetModel
                                                        .approbationBudget ==
                                                    "Unapproved" ||
                                                widget.projetModel
                                                        .approbationFin ==
                                                    "Unapproved")
                                              editButton(),
                                            PrintWidget(
                                                onPressed: () async {
                                              await ProjetPdf.generate(
                                                  widget.projetModel);
                                            }),
                                          ],
                                        ),
                                        SelectableText(
                                            DateFormat("dd-MM-yyyy HH:mm")
                                                .format(widget
                                                    .projetModel.created),
                                            textAlign: TextAlign.start),
                                      ],
                                    )
                                  ],
                                ),
                                dataWidget(controller, profilController),
                                total(),
                              ],
                            ),
                          ),
                        ),
                        const SizedBox(height: p20),
                        TablePersonnelsRolesProjet(
                          personnelsRolesController:
                              personnelsRolesController,
                          personnelsController: personnelsController,
                          approuvedDD: widget.projetModel.approbationDD,
                          id: widget.projetModel.id!,
                          departement: 'Exploitations',
                          projetModel: widget.projetModel,
                        ),
                        const SizedBox(height: p20),
                        TableTachesProjetDetail(
                            tachesController: tachesController,
                            id: widget.projetModel.id!,
                            departement: 'Exploitations',
                          projetModel: widget.projetModel,
                        ),
                        const SizedBox(height: p20),
                        TableVersementDetail(
                            versementList: state!
                                .where((element) =>
                                    element.reference ==
                                    widget.projetModel.id)
                                .toList(),
                            versementController: versementController),
                        const SizedBox(height: p20),
                        ApprobationProjet(
                            projetModel: widget.projetModel,
                            controller: controller,
                            profilController: profilController)
                      ],
                    ),
                  ))
            ],
          )));
  }

  Widget editButton() {
    return IconButton(
      icon: Icon(Icons.edit, color: Colors.red.shade700),
      tooltip: "Modification",
      onPressed: () => showDialog<String>(
        context: context,
        builder: (BuildContext context) => AlertDialog(
          title: const Text(
            'Etes-vous sûr de modifier ceci?',
            style: TextStyle(color: Colors.red),
          ),
          content: const Text('Cette action permet de modifier le projet.'),
          actions: <Widget>[
            TextButton(
              onPressed: () => Navigator.pop(context, 'Cancel'),
              child: const Text('Annuler', style: TextStyle(color: Colors.red)),
            ),
            TextButton(
              onPressed: () async {
                Get.toNamed(ExploitationRoutes.expProjetUpdate,
                    arguments: widget.projetModel);
              },
              child: const Text('OK', style: TextStyle(color: Colors.red)),
            ),
          ],
        ),
      ),
    );
  }

  Widget total() {
    final headline6 = Theme.of(context).textTheme.headline6;
    double versementTotal = 0.0;
    double coutProjetTotal = double.parse(widget.projetModel.coutProjet);

    for (var element in versementController.versementProjetList
        .where((element) => element.reference == widget.projetModel.id)) {
      versementTotal += double.parse(element.montantVerser);
    }

    double recettePourcent = versementTotal * 100 / coutProjetTotal;

    return ResponsiveChild3Widget(
      child1: const Text("Versements",
          style: TextStyle(fontWeight: FontWeight.bold)),
      child2: Container(
        decoration: BoxDecoration(
            border: Border(
          left: BorderSide(
            color: mainColor,
            width: 2,
          ),
        )),
        child: Column(
          children: [
            const Text("Total", style: TextStyle(fontWeight: FontWeight.bold)),
            Text(
                "${NumberFormat.decimalPattern('fr').format(versementTotal)} \$",
                textAlign: TextAlign.center,
                maxLines: 1,
                style: headline6!.copyWith(color: Colors.orange.shade700)),
          ],
        ),
      ),
      child3: Container(
        decoration: BoxDecoration(
            border: Border(
          left: BorderSide(
            color: mainColor,
            width: 2,
          ),
        )),
        child: Column(
          children: [
            const Text("Versements en %",
                style: TextStyle(fontWeight: FontWeight.bold)),
            Text(
                "${NumberFormat.decimalPattern('fr').format(double.parse(recettePourcent.toStringAsFixed(2)))} %",
                textAlign: TextAlign.center,
                maxLines: 1,
                style: headline6.copyWith(color: Colors.orange.shade700)),
          ],
        ),
      ),
    );
  }

  Widget dataWidget(
      ProjetController controller, ProfilController profilController) {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Nom Projet :',
                  textAlign: TextAlign.start,
                  style: bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.nomProjet,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Coût du Projet :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.projetModel.coutProjet))} \$",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Responsable :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.responsable,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Objectifs :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.objectifs,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Description :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.description,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Responsabilite :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.responsabilite,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Communication :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.communication,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Processus de Verification :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.processusVerification,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Problème potientiel et risque :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.problemePotientEtRisque,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Date de Debut et Fin :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.dateDebutEtFin,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Budget detailé :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.budgetDetail,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Recettes attendu :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.projetModel.recetteAttendus))} \$",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Signature :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.signature,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Type Financement :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.typeFinancement,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChild3Widget(
              flex1: 1,
              flex2: 2,
              flex3: 3,
              child1: Text(
                'Observation',
                style: bodyMedium.copyWith(fontWeight: FontWeight.bold),
              ),
              child2: (widget.projetModel.observation == 'true')
                  ? SelectableText(
                      'Payé',
                      style: bodyMedium.copyWith(
                          color: Colors.greenAccent.shade700),
                    )
                  : SelectableText(
                      'Non payé',
                      style:
                          bodyMedium.copyWith(color: Colors.redAccent.shade700),
                    ),
              child3: (widget.projetModel.observation == 'false' &&
                      profilController.user.departement == "Finances")
                  ? checkboxRead(controller)
                  : Container()),
          Divider(color: mainColor),
        ],
      ),
    );
  }

  Color getColor(Set<MaterialState> states) {
    const Set<MaterialState> interactiveStates = <MaterialState>{
      MaterialState.pressed,
      MaterialState.hovered,
      MaterialState.focused,
    };
    if (states.any(interactiveStates.contains)) {
      return Colors.red;
    }
    return Colors.green;
  }

  checkboxRead(ProjetController controller) {
    bool isChecked = false;
    if (widget.projetModel.observation == 'true') {
      isChecked = true;
    } else if (widget.projetModel.observation == 'false') {
      isChecked = false;
    }
    return ListTile(
      leading: Checkbox(
        checkColor: Colors.white,
        fillColor: MaterialStateProperty.resolveWith(getColor),
        value: isChecked,
        onChanged: (bool? value) {
          setState(() {
            isChecked = value!;
            if (isChecked) {
              controller.submitObservation(widget.projetModel, 'true');
            } else {
              controller.submitObservation(widget.projetModel, 'false');
            }
          });
        },
      ),
      title: const Text("Confirmation de payement"),
    );
  }

  SpeedDial speedialWidget(TachesController tachesController,
      PersonnelsRolesController personnelsRolesController) {
    return SpeedDial(
      closedForegroundColor: themeColor,
      openForegroundColor: Colors.white,
      closedBackgroundColor: themeColor,
      openBackgroundColor: themeColor,
      speedDialChildren: <SpeedDialChild>[
        (widget.projetModel.approbationDG == "-" ||
                widget.projetModel.approbationDD == "-" ||
                widget.projetModel.approbationBudget == "-" ||
                widget.projetModel.approbationFin == "-")
            ? SpeedDialChild(
                child: const Icon(Icons.monetization_on),
                foregroundColor: Colors.white,
                backgroundColor: Colors.green.shade700,
                label: 'Versement',
                onPressed: () {
                  Get.toNamed(ExploitationRoutes.expVersementAdd,
                      arguments: widget.projetModel);
                },
              )
            : SpeedDialChild(
                child: const Icon(Icons.monetization_on),
                foregroundColor: Colors.white,
                backgroundColor: Colors.green.shade700,
                label: 'Pas encore approuvé',
                onPressed: () {},
              ),
        SpeedDialChild(
            child: const Icon(Icons.content_paste_sharp),
            foregroundColor: Colors.white,
            backgroundColor: Colors.blue.shade700,
            label: 'Nouvelle tache',
            onPressed: () {
              showModalBottomSheet<void>(
                context: context, 
                builder: (BuildContext context) {
                  return Container(
                    color: Colors.amber.shade100,
                    padding: const EdgeInsets.all(p20),
                    child: ListView(
                      shrinkWrap: true,
                      children: [
                        Form(
                          key: tachesController.formKey,
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: <Widget>[
                              Row(
                                children: [
                              Expanded(
                                  child: Text("Ecrire votre tâche ici.",
                                      style: Theme.of(context)
                                          .textTheme
                                          .headlineSmall)),
                                ],
                              ),
                              const SizedBox(
                                height: p20,
                              ),
                              agentWidget(
                                  tachesController, personnelsRolesController),
                              jalonControllerWidget(tachesController),
                              tacheControllerWidget(tachesController),
                              const SizedBox(
                                height: p20,
                              ),
                              const SizedBox(
                                height: p20,
                              ),
                              BtnWidget(
                                  title: 'Soumettre',
                                  press: () {
                                    final form =
                                        tachesController.formKey.currentState!;
                                    if (form.validate()) {
                                      tachesController.submit(
                                          widget.projetModel.nomProjet,
                                          tachesController.tachesList.length,
                                          widget.projetModel.id!,
                                          'Exploitations');
                                      form.reset();
                                    }
                                  },
                                  isLoading: tachesController.isLoading)
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              );
            })
      ],
      child: const Icon(Icons.menu, color: Colors.white),
    );
  }

  Widget agentWidget(TachesController tachesController,
      PersonnelsRolesController personnelsRolesController) {
    var agentList = personnelsRolesController.personnelsRoleList
        .map((e) => e.agent)
        .toList();
    return Container(
      margin: const EdgeInsets.only(bottom: p20),
      child: DropdownButtonFormField<String>(
        decoration: InputDecoration(
          labelText: 'Personnel',
          labelStyle: const TextStyle(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
          contentPadding: const EdgeInsets.only(left: 5.0),
        ),
        value: tachesController.agent,
        isExpanded: true,
        items: agentList.map((String value) {
          return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
          );
        }).toList(),
        validator: (value) => value == null ? "Select personnel" : null,
        onChanged: (value) {
          setState(() {
            tachesController.agent = value!;
          });
        },
      ),
    );
  }

  Widget jalonControllerWidget(TachesController tachesController) {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: tachesController.jalonController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Jalon',
          ),
          keyboardType: TextInputType.multiline,
          minLines: 1,
          maxLines: 3,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget tacheControllerWidget(TachesController tachesController) {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: tachesController.tacheController,
          keyboardType: TextInputType.multiline,
          minLines: 5,
          maxLines: 10,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Tâches',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }
}
