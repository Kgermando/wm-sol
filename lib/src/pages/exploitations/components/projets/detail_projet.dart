import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:flutter_quill/flutter_quill.dart' as flutter_quill;
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:simple_speed_dial/simple_speed_dial.dart';
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:wm_solution/src/helpers/monnaire_storage.dart';
import 'package:wm_solution/src/helpers/network_controller.dart';
import 'package:wm_solution/src/models/exploitations/projet_model.dart';
import 'package:wm_solution/src/models/exploitations/section_projet_model.dart';
import 'package:wm_solution/src/navigation/drawer/drawer_menu.dart';
import 'package:wm_solution/src/navigation/header/header_bar.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';
import 'package:wm_solution/src/pages/exploitations/components/projets/approbation_projet.dart';
import 'package:wm_solution/src/pages/exploitations/components/projets/projet_pdf.dart';
import 'package:wm_solution/src/pages/exploitations/components/projets/table_personnels_roles_projet.dart';
import 'package:wm_solution/src/pages/exploitations/components/projets/table_taches_projet_detail.dart';
import 'package:wm_solution/src/pages/exploitations/components/versements/table_versement_detail.dart';
import 'package:wm_solution/src/pages/exploitations/controller/projets/projet_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/projets/section_projet_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/versements/versement_controller.dart';
import 'package:wm_solution/src/pages/personnels_roles/controller/personnels_roles_controller.dart';
import 'package:wm_solution/src/pages/ressource_humaines/controller/personnels/personnels_controller.dart';
import 'package:wm_solution/src/pages/taches/controller/taches_controller.dart';
import 'package:wm_solution/src/routes/routes.dart';
import 'package:wm_solution/src/widgets/btn_widget.dart';
import 'package:wm_solution/src/widgets/loading.dart';
import 'package:wm_solution/src/widgets/print_widget.dart';
import 'package:wm_solution/src/widgets/responsive_child3_widget.dart';
import 'package:wm_solution/src/widgets/responsive_child_widget.dart';
import 'package:wm_solution/src/widgets/title_widget.dart';

class DetailProjet extends StatefulWidget {
  const DetailProjet({super.key, required this.projetModel});
  final ProjetModel projetModel;

  @override
  State<DetailProjet> createState() => _DetailProjetState();
}

class _DetailProjetState extends State<DetailProjet> {
  final ProjetController controller = Get.find();
  final PersonnelsController personnelsController = Get.find();
  final SectionProjetController sectionProjetController = Get.find();
  final TachesController tachesController = Get.find();
  final VersementController versementController = Get.find();
  final PersonnelsRolesController personnelsRolesController = Get.find();
  final ProfilController profilController = Get.find();
  final NetworkController networkController = Get.find();
  final MonnaieStorage monnaieStorage = Get.put(MonnaieStorage());

  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey();
  String title = "Exploitations";

    final FocusNode _focusNode = FocusNode();
 
 
  Future<ProjetModel> refresh() async {
    final ProjetModel dataItem =
        await controller.detailView(widget.projetModel.id!);
    return dataItem;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: scaffoldKey,
        appBar: headerBar(
            context, scaffoldKey, title, widget.projetModel.nomProjet),
        drawer: const DrawerMenu(),
        floatingActionButton: (widget.projetModel.isSubmit == "true") ?
            speedialWidget(tachesController, personnelsRolesController) : Container(),
        body: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Visibility(
                visible: !Responsive.isMobile(context),
                child: const Expanded(flex: 1, child: DrawerMenu())),
            Expanded(
                flex: 5,
                child: sectionProjetController.obx(
                    onLoading: loadingPage(context),
                    onEmpty: const Text('Aucune donnÃ©e'),
                    onError: (error) => loadingError(context, error!),
                    (state) => Container(
                          margin: const EdgeInsets.only(
                              top: p20, bottom: p8, right: p20, left: p20),
                          decoration: const BoxDecoration(
                              borderRadius:
                                  BorderRadius.all(Radius.circular(20))),
                          child: ListView( 
                            physics: const ScrollPhysics(),
                            children: [
                              Card(
                                elevation: 3,
                                child: Padding(
                                  padding: const EdgeInsets.symmetric(
                                      horizontal: p20),
                                  child: Column(
                                    crossAxisAlignment:
                                        CrossAxisAlignment.start,
                                    children: [ 
                                      Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          if (!Responsive.isMobile(context))
                                            TitleWidget(
                                                title: widget
                                                    .projetModel.nomProjet),
                                          Column(
                                            children: [
                                              Row(
                                                children: [
                                                  if (widget.projetModel
                                                          .isSubmit ==
                                                      'false')
                                                    IconButton(
                                                        tooltip:
                                                            'Soumettre chez le DD',
                                                        onPressed: () async {
                                                          controller.submiToDD(
                                                              widget
                                                                  .projetModel);
                                                          refresh().then((value) =>
                                                              Navigator.pushNamed(
                                                                  context,
                                                                  ExploitationRoutes
                                                                      .expProjetDetail,
                                                                  arguments:
                                                                      value));
                                                        },
                                                        icon: Icon(Icons.send,
                                                            color: Colors.teal
                                                                .shade700)),
                                                  IconButton(
                                                      tooltip: 'Actualiser',
                                                      onPressed: () async {
                                                        refresh().then((value) =>
                                                            Navigator.pushNamed(
                                                                context,
                                                                ExploitationRoutes
                                                                    .expProjetDetail,
                                                                arguments:
                                                                    value));
                                                      },
                                                      icon: const Icon(
                                                          Icons.refresh,
                                                          color: Colors.green)),
                                                  if (widget.projetModel.approbationDG == "Unapproved" ||
                                                      widget.projetModel
                                                              .approbationDD ==
                                                          "Unapproved" ||
                                                      widget.projetModel
                                                              .approbationBudget ==
                                                          "Unapproved" ||
                                                      widget.projetModel
                                                              .approbationFin ==
                                                          "Unapproved")
                                                    editButton(),
                                                  if (widget.projetModel
                                                        .approbationDD ==  "-")
                                                  deleteButton(),
                                                  PrintWidget(
                                                      onPressed: () async {
                                                    await ProjetPdf.generate(
                                                        widget.projetModel,
                                                        monnaieStorage);
                                                  }),
                                                ],
                                              ),
                                              SelectableText(
                                                  DateFormat("dd-MM-yyyy HH:mm")
                                                      .format(widget
                                                          .projetModel.created),
                                                  textAlign: TextAlign.start),
                                              if (widget.projetModel.statut ==
                                                  "En cours")
                                                Text(widget.projetModel.statut,
                                                    style: const TextStyle(
                                                        color: Colors.green)),
                                              if (widget.projetModel.statut ==
                                                  "En constitution")
                                                Text(widget.projetModel.statut,
                                                    style: const TextStyle(
                                                        color: Colors.purple)),
                                              if (widget.projetModel.statut ==
                                                  "En attente")
                                                Text(widget.projetModel.statut,
                                                    style: const TextStyle(
                                                        color: Colors.orange)),
                                              if (widget.projetModel.statut ==
                                                  "Cloturer")
                                                Text(widget.projetModel.statut,
                                                    style: TextStyle(
                                                        color: mainColor)),
                                            ],
                                          )
                                        ],
                                      ),
                                      dataWidget(controller, profilController),
                                      sectionWidget(state!),
                                      if (widget.projetModel.isSubmit == 'false')
                                      const SizedBox(height: p20),
                                    if (widget.projetModel.isSubmit == 'false')
                                     Obx(() => Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.end,
                                        children: [
                                          IconButton(
                                              tooltip: "Ajouter une section",
                                              onPressed: () {
                                                sectionProjetController
                                                    .showSectionField();
                                              },
                                              icon: (sectionProjetController
                                                .isVisible) ? Icon(
                                                    Icons.linear_scale,
                                                    color: mainColor) 
                                                  : Icon(Icons.add,
                                                  color: mainColor))
                                        ],
                                      )) ,
                                  if (widget.projetModel.isSubmit == 'false')
                                Obx(() => Visibility(
                                      visible: sectionProjetController
                                          .isVisible,
                                      child: Form(
                                        key: sectionProjetController
                                            .formKey,
                                        child: Column(
                                          children: [ 
                                            quillControllerWidget(),
                                            const SizedBox(height: p20),
                                            OutlinedButton(
                                                onPressed: () {
                                                  final form =
                                                      sectionProjetController
                                                          .formKey
                                                          .currentState!;
                                                  if (form.validate()) {
                                                    sectionProjetController
                                                        .submit(widget
                                                            .projetModel);
                                                    form.reset();
                                                    sectionProjetController
                                                        .showSectionField();
                                                  }
                                                },
                                                child: const Text(
                                                    "Ajouter la section"))
                                          ],
                                        ),
                                      ),
                                    )),
                                      const SizedBox(height: p20),
                                      const Divider(color: Colors.red),
                                      total(),
                                    ],
                                  ),
                                ),
                              ),
                              if (widget.projetModel.isSubmit == 'true')
                                const SizedBox(height: p20),
                              if (widget.projetModel.isSubmit == 'true')
                                TablePersonnelsRolesProjet(
                                  personnelsRolesController:
                                      personnelsRolesController,
                                  personnelsController: personnelsController,
                                  approuvedDD: widget.projetModel.approbationDD,
                                  id: widget.projetModel.id!,
                                  departement: 'Exploitations',
                                  projetModel: widget.projetModel,
                                ),
                              if (widget.projetModel.isSubmit == 'true')
                                const SizedBox(height: p20),
                              if (widget.projetModel.isSubmit == 'true')
                                TableTachesProjetDetail(
                                  tachesController: tachesController,
                                  id: widget.projetModel.id!,
                                  departement: 'Exploitations',
                                  projetModel: widget.projetModel,
                                ),
                              if (widget.projetModel.isSubmit == 'true')
                                const SizedBox(height: p20),
                              if (widget.projetModel.isSubmit == 'true')
                                TableVersementDetail(
                                  versementList: versementController
                                    .versementProjetList
                                    .where((element) =>
                                        element.reference ==
                                        widget.projetModel.id && 
                                        element.nomProjet == widget.projetModel.nomProjet)
                                        .toList(),
                                    versementController: versementController),
                              const SizedBox(height: p20),
                              if (widget.projetModel.isSubmit == 'true')
                                ApprobationProjet(
                                    projetModel: widget.projetModel,
                                    controller: controller,
                                    profilController: profilController)
                            ],
                          ),
                        )))
          ],
        ));
  }

  Widget editButton() {
    return IconButton(
      icon: Icon(Icons.edit, color: Colors.purple.shade700),
      tooltip: "Modification",
      onPressed: () => showDialog<String>(
        context: context,
        builder: (BuildContext context) => AlertDialog(
          title: const Text(
            'Etes-vous sÃ»r de modifier ceci?',
            style: TextStyle(color: Colors.purple),
          ),
          content: const Text('Cette action permet de modifier le projet.'),
          actions: <Widget>[
            TextButton(
              onPressed: () => Navigator.pop(context, 'Cancel'),
              child: const Text('Annuler', style: TextStyle(color: Colors.purple)),
            ),
            TextButton(
              onPressed: () async {
                Get.toNamed(ExploitationRoutes.expProjetUpdate,
                    arguments: widget.projetModel);
                Navigator.pop(context, 'ok');
              },
              child: const Text('OK', style: TextStyle(color: Colors.purple)),
            ),
          ],
        ),
      ),
    );
  }

  Widget deleteButton() {
    return IconButton(
      icon: Icon(Icons.delete, color: Colors.red.shade700),
      tooltip: "Suppression",
      onPressed: () => showDialog<String>(
        context: context,
        builder: (BuildContext context) => AlertDialog(
          title: const Text(
            'Etes-vous sÃ»r de supprimer ceci?',
            style: TextStyle(color: Colors.red),
          ),
          content: const Text('Cette action permet de modifier le projet.'),
          actions: <Widget>[
            TextButton(
              onPressed: () => Navigator.pop(context, 'Cancel'),
              child: const Text('Annuler', style: TextStyle(color: Colors.red)),
            ),
            TextButton(
              onPressed: () {
                controller.deleteData(widget.projetModel.id!);
                Navigator.pop(context, 'ok');
              },
              child: const Text('OK', style: TextStyle(color: Colors.red)),
            ),
          ],
        ),
      ),
    );
  }

 

  Widget total() {
    final headline6 = Theme.of(context).textTheme.headline6;
    double versementTotal = 0.0;
    double coutProjetTotal = double.parse(widget.projetModel.coutProjet);

    for (var element in versementController.versementProjetList
        .where((element) => element.reference == widget.projetModel.id && 
        element.nomProjet == widget.projetModel.nomProjet)) {
      versementTotal += double.parse(element.montantVerser);
    }

    double recettePourcent = versementTotal * 100 / coutProjetTotal;

    return ResponsiveChild3Widget(
      child1: Text("Versements",
          style: headline6),
      child2: Container(
        decoration: BoxDecoration(
            border: Border(
          left: BorderSide(
            color: mainColor,
            width: 2,
          ),
        )),
        child: Column(
          children: [
            const Text("Total", style: TextStyle(fontWeight: FontWeight.bold)),
            Text(
                "${NumberFormat.decimalPattern('fr').format(versementTotal)} ${monnaieStorage.monney}",
                textAlign: TextAlign.center,
                maxLines: 1,
                style: headline6!.copyWith(color: Colors.orange.shade700)),
          ],
        ),
      ),
      child3: Container(
        decoration: BoxDecoration(
            border: Border(
          left: BorderSide(
            color: mainColor,
            width: 2,
          ),
        )),
        child: Column(
          children: [
            const Text("Versements en %",
                style: TextStyle(fontWeight: FontWeight.bold)),
            Text(
                "${NumberFormat.decimalPattern('fr').format(double.parse(recettePourcent.toStringAsFixed(2)))} %",
                textAlign: TextAlign.center,
                maxLines: 1,
                style: headline6.copyWith(color: Colors.orange.shade700)),
          ],
        ),
      ),
    );
  }

  Widget dataWidget(
      ProjetController controller, ProfilController profilController) {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Nom Projet :',
                  textAlign: TextAlign.start,
                  style: bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.nomProjet,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('CoÃ»t du Projet :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.projetModel.coutProjet))} ${monnaieStorage.monney}",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Responsable :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.responsable,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Date de Debut et Fin :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.dateDebutEtFin,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Recettes attendu :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.projetModel.recetteAttendus))} ${monnaieStorage.monney}",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Signature :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.signature,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              flex1: 1,
              flex2: 3,
              child1: Text('Type Financement :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.projetModel.typeFinancement,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChild3Widget(
              flex1: 1,
              flex2: 2,
              flex3: 3,
              child1: Text(
                'Observation',
                style: bodyMedium.copyWith(fontWeight: FontWeight.bold),
              ),
              child2: (widget.projetModel.observation == 'true')
                  ? SelectableText(
                      'PayÃ©',
                      style: bodyMedium.copyWith(
                          color: Colors.greenAccent.shade700),
                    )
                  : SelectableText(
                      'Non payÃ©',
                      style:
                          bodyMedium.copyWith(color: Colors.redAccent.shade700),
                    ),
              child3: (widget.projetModel.observation == 'false' &&
                      profilController.user.departement == "Finances")
                  ? checkboxRead(controller)
                  : Container()),
          Divider(color: mainColor),
        ],
      ),
    );
  }

  Widget sectionWidget(List<SectionProjetModel> state) { 
    var sectionProjetList = state
        .where((element) =>
            element.reference == widget.projetModel.id &&
            element.nomProjet == widget.projetModel.nomProjet)
        .toList();
        
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: ListView.builder(
          shrinkWrap: true,
          itemCount: sectionProjetList.length,
          itemBuilder: (context, index) {
            SectionProjetModel sectionProjetModel = sectionProjetList[index];

            var json = jsonDecode(sectionProjetModel.detail);
            sectionProjetController.quillControllerRead = flutter_quill.QuillController(
                document: flutter_quill.Document.fromJson(json),
                selection: const TextSelection.collapsed(offset: 0)
            );

            return Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                 if (widget.projetModel.isSubmit == 'false')
                  Row(
                    mainAxisAlignment: MainAxisAlignment.end,
                    children: [
                    IconButton(
                    tooltip: 'Modification',
                      onPressed: () {
                        alertEditDialog(sectionProjetModel);
                      },
                      icon: (sectionProjetController.isLoading)
                        ? loadingMini()
                        : const Icon(Icons.edit, color: Colors.purple)),
                  IconButton(
                      tooltip: 'Suppression',
                      onPressed: () {
                        alertDeleteDialog(sectionProjetModel);
                      },
                      icon: (sectionProjetController.isLoading) 
                        ? loadingMini() 
                        : const Icon(Icons.delete, color: Colors.red)),
                  ],
                ),
                const SizedBox(height: p10),
                flutter_quill.QuillEditor.basic(
                  controller: sectionProjetController.quillControllerRead,
                  readOnly: true,
                  locale: const Locale('fr'),
                ), 
                Divider(color: mainColor),
              ],
            );
          }),
    );
  }

  alertEditDialog(SectionProjetModel sectionProjetModel) {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) { 

             var json = jsonDecode(sectionProjetModel.detail);
            sectionProjetController.quillController =
                flutter_quill.QuillController(
                    document: flutter_quill.Document.fromJson(json),
                    selection: const TextSelection.collapsed(offset: 0));
            return AlertDialog(
              content: SizedBox( 
                  width: 400,
                  child: Form(
                    key: sectionProjetController.formKey,
                    child: Column(
                      children: [ 
                        quillControllerWidget(),
                      ],
                    ),
                  )),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.pop(context, 'Cancel'),
                  child: Text('Annuler',
                      style: TextStyle(color: Colors.purple.shade700)),
                ),
                TextButton(
                  onPressed: () {
                    final form = sectionProjetController.formKey.currentState!;
                    if (form.validate()) {
                      sectionProjetController.submitUpdate(sectionProjetModel);
                      form.reset();
                      Navigator.pop(context, 'ok');
                    }
                  },
                  child: Text('OK',
                      style: TextStyle(color: Colors.purple.shade700)),
                ),
              ],
            );
          });
        });
  }

  alertDeleteDialog(SectionProjetModel sectionProjetModel) {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) {
            return AlertDialog(
              title: Text('Etes-vous sÃ»r de vouloir suppimer ceci ?',
                  style: TextStyle(color: Colors.red.shade700)),
              content: const SizedBox(
                  height: 100,
                  width: 100,
                  child: Text("Cette action permet de supprimer le budget")),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.pop(context, 'Cancel'),
                  child: Text('Annuler',
                      style: TextStyle(color: Colors.red.shade700)),
                ),
                TextButton(
                  onPressed: () {
                    sectionProjetController.deleteData(sectionProjetModel.id!);
                    Navigator.pop(context, 'ok');
                  },
                  child:
                      Text('OK', style: TextStyle(color: Colors.red.shade700)),
                ),
              ],
            );
          });
        });
  }

  Color getColor(Set<MaterialState> states) {
    const Set<MaterialState> interactiveStates = <MaterialState>{
      MaterialState.pressed,
      MaterialState.hovered,
      MaterialState.focused,
    };
    if (states.any(interactiveStates.contains)) {
      return Colors.red;
    }
    return Colors.green;
  }

  checkboxRead(ProjetController controller) {
    bool isChecked = false;
    if (widget.projetModel.observation == 'true') {
      isChecked = true;
    } else if (widget.projetModel.observation == 'false') {
      isChecked = false;
    }
    return ListTile(
      leading: Checkbox(
        checkColor: Colors.white,
        fillColor: MaterialStateProperty.resolveWith(getColor),
        value: isChecked,
        onChanged: (bool? value) {
          setState(() {
            isChecked = value!;
            if (isChecked) {
              controller.submitObservation(widget.projetModel, 'true');
            } else {
              controller.submitObservation(widget.projetModel, 'false');
            }
          });
        },
      ),
      title: const Text("Confirmation de payement"),
    );
  }

  SpeedDial speedialWidget(TachesController tachesController,
      PersonnelsRolesController personnelsRolesController) {
    return SpeedDial(
      closedForegroundColor: themeColor,
      openForegroundColor: Colors.white,
      closedBackgroundColor: themeColor,
      openBackgroundColor: themeColor,
      speedDialChildren: <SpeedDialChild>[
        (widget.projetModel.approbationDG == "-" ||
                widget.projetModel.approbationDD == "-" ||
                widget.projetModel.approbationBudget == "-" ||
                widget.projetModel.approbationFin == "-")
            ? SpeedDialChild(
                child: const Icon(Icons.monetization_on),
                foregroundColor: Colors.white,
                backgroundColor: Colors.green.shade700,
                label: 'Versement',
                onPressed: () {
                  Get.toNamed(ExploitationRoutes.expVersementAdd,
                      arguments: widget.projetModel);
                },
              )
            : SpeedDialChild(
                child: const Icon(Icons.monetization_on),
                foregroundColor: Colors.white,
                backgroundColor: Colors.green.shade700,
                label: 'Pas encore approuvÃ©',
                onPressed: () {},
              ),
        SpeedDialChild(
            child: const Icon(Icons.content_paste_sharp),
            foregroundColor: Colors.white,
            backgroundColor: Colors.blue.shade700,
            label: 'Nouvelle tache',
            onPressed: () {
              showModalBottomSheet<void>(
                context: context,
                builder: (BuildContext context) {
                  return Container(
                    color: Colors.amber.shade100,
                    padding: const EdgeInsets.all(p20),
                    child: ListView(
                      shrinkWrap: true,
                      children: [
                        Form(
                          key: tachesController.formKey,
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: <Widget>[
                              Row(
                                children: [
                                  Expanded(
                                    child: Text("CrÃ©er la tÃ¢che",
                                      style: Theme.of(context)
                                          .textTheme
                                          .headlineSmall)),
                                ],
                              ),
                              const SizedBox(
                                height: p20,
                              ),
                              agentWidget(
                                  tachesController, personnelsRolesController),
                              jalonControllerWidget(tachesController),
                              tacheControllerWidget(tachesController),
                              const SizedBox(
                                height: p20,
                              ),
                              const SizedBox(
                                height: p20,
                              ),
                              BtnWidget(
                                  title: 'Soumettre',
                                  press: () {
                                    final form =
                                        tachesController.formKey.currentState!;
                                    if (form.validate()) {
                                      tachesController.submit(
                                          widget.projetModel.nomProjet,
                                          tachesController.tachesList.length,
                                          widget.projetModel.id!,
                                          'Exploitations');
                                      form.reset();
                                    }
                                  },
                                  isLoading: tachesController.isLoading)
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              );
            })
      ],
      child: const Icon(Icons.menu, color: Colors.white),
    );
  }

  Widget agentWidget(TachesController tachesController,
      PersonnelsRolesController personnelsRolesController) {
    var agentList = personnelsRolesController.personnelsRoleList
        .map((e) => e.agent)
        .toList();
    return Container(
      margin: const EdgeInsets.only(bottom: p20),
      child: DropdownButtonFormField<String>(
        decoration: InputDecoration(
          labelText: 'Personnel',
          labelStyle: const TextStyle(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
          contentPadding: const EdgeInsets.only(left: 5.0),
        ),
        value: tachesController.agent,
        isExpanded: true,
        items: agentList.map((String value) {
          return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
          );
        }).toList(),
        validator: (value) => value == null ? "Select personnel" : null,
        onChanged: (value) {
          setState(() {
            tachesController.agent = value!;
          });
        },
      ),
    );
  }

  Widget jalonControllerWidget(TachesController tachesController) {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: tachesController.jalonController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Jalon',
          ),
          keyboardType: TextInputType.multiline,
          minLines: 1,
          maxLines: 3,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget tacheControllerWidget(TachesController tachesController) {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: tachesController.tacheController,
          keyboardType: TextInputType.multiline,
          minLines: 5,
          maxLines: 10,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'TÃ¢ches',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }
 

  Widget quillControllerWidget() {
    return Column(
      children: [
        flutter_quill.QuillToolbar.basic(
            controller: sectionProjetController.quillController),
        SizedBox(
          height: 300,
          child: Row(
            children: [
              Expanded(
                child: flutter_quill.QuillEditor(
                  controller: sectionProjetController.quillController,
                  readOnly: false, // true for view only mode
                  scrollController: ScrollController(),
                  scrollable: true,
                  focusNode: _focusNode,
                  autoFocus: false,
                  placeholder: 'Ecrire le detail ici ...',
                  expands: true,
                  padding: EdgeInsets.zero,
                ),
              ),
            ],
          ),
        )
      ],
    );
  }

  // Widget detailSectionWidget() {
  //   return Container(
  //     margin: const EdgeInsets.only(bottom: p20),
  //     child: TextFormField(
  //       controller: sectionProjetController.detailController,
  //       keyboardType: TextInputType.multiline,
  //       minLines: 5,
  //       maxLines: 10,
  //       decoration: InputDecoration(
  //         border:
  //             OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
  //         labelText: 'Detail',
  //       ),
  //       style: const TextStyle(),
  //       validator: (value) {
  //         if (value != null && value.isEmpty) {
  //           return 'Ce champs est obligatoire';
  //         } else {
  //           return null;
  //         }
  //       },
  //     )
  //   );
  // }
}
