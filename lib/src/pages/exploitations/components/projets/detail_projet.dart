import 'package:flutter/material.dart'; 
import 'package:get/get.dart'; 
import 'package:simple_speed_dial/simple_speed_dial.dart';
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:wm_solution/src/helpers/monnaire_storage.dart';
import 'package:wm_solution/src/controllers/network_controller.dart';
import 'package:wm_solution/src/models/exploitations/projet_model.dart'; 
import 'package:wm_solution/src/navigation/drawer/drawer_menu.dart';
import 'package:wm_solution/src/navigation/header/header_bar.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';  
import 'package:wm_solution/src/pages/exploitations/components/projets/stats_projet.dart';  
import 'package:wm_solution/src/pages/exploitations/components/projets/view_projet.dart'; 
import 'package:wm_solution/src/pages/exploitations/controller/projets/projet_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/projets/section_projet_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/versements/versement_controller.dart';
import 'package:wm_solution/src/pages/personnels_roles/controller/personnels_roles_controller.dart';
import 'package:wm_solution/src/pages/ressource_humaines/controller/personnels/personnels_controller.dart';
import 'package:wm_solution/src/pages/taches/controller/taches_controller.dart';
import 'package:wm_solution/src/routes/routes.dart';
import 'package:wm_solution/src/widgets/btn_widget.dart';
import 'package:wm_solution/src/widgets/loading.dart'; 

class DetailProjet extends StatefulWidget {
  const DetailProjet({super.key, required this.projetModel});
  final ProjetModel projetModel;

  @override
  State<DetailProjet> createState() => _DetailProjetState();
}

class _DetailProjetState extends State<DetailProjet> {
  final ProjetController controller = Get.find();
  final PersonnelsController personnelsController = Get.find();
  final SectionProjetController sectionProjetController = Get.find();
  final TachesController tachesController = Get.find();
  final VersementController versementController = Get.find();
  final PersonnelsRolesController personnelsRolesController = Get.find();
  final ProfilController profilController = Get.find();
  final NetworkController networkController = Get.find();
  final MonnaieStorage monnaieStorage = Get.put(MonnaieStorage());

  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey();
  String title = "Exploitations";

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: scaffoldKey,
        appBar: headerBar(
            context, scaffoldKey, title, widget.projetModel.nomProjet),
        drawer: const DrawerMenu(),
        floatingActionButton: (widget.projetModel.isSubmit == "true")
            ? speedialWidget(tachesController, personnelsRolesController)
            : Container(),
        body: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Visibility(
                visible: !Responsive.isMobile(context),
                child: const Expanded(flex: 1, child: DrawerMenu())),
            Expanded(
                flex: 5,
                child: sectionProjetController.obx(
                    onLoading: loadingPage(context),
                    onEmpty: const Text('Aucune donnée'),
                    onError: (error) => loadingError(context, error!),
                    (state) => DefaultTabController(
                        length: 2,
                        child: ListView(
                          shrinkWrap: true,
                          children: [
                            const SizedBox(
                              height: 30,
                              child: TabBar(
                                physics: ScrollPhysics(),
                                tabs: [Tab(text: "View"), Tab(text: "Stats")],
                              ),
                            ),
                            Container(
                              margin: const EdgeInsets.only(
                                  top: p20, bottom: p8, right: p20, left: p20),
                              decoration: const BoxDecoration(
                                  borderRadius:
                                      BorderRadius.all(Radius.circular(20))),
                              constraints: BoxConstraints(
                                  maxHeight:
                                      MediaQuery.of(context).size.height),
                              child: TabBarView(
                                physics: const ScrollPhysics(),
                                children: [
                                  SingleChildScrollView(
                                      child: ViewProjet(
                                          projetModel: widget.projetModel,
                                          controller: controller,
                                          personnelsController:
                                              personnelsController,
                                          sectionProjetController:
                                              sectionProjetController,
                                          tachesController: tachesController,
                                          versementController:
                                              versementController,
                                          personnelsRolesController:
                                              personnelsRolesController,
                                          profilController: profilController,
                                          monnaieStorage: monnaieStorage,
                                          state: state!)),
                                  SingleChildScrollView(
                                      child: StatsProjet(
                                          projetModel: widget.projetModel,
                                          controller: controller,
                                          personnelsController:
                                              personnelsController,
                                          sectionProjetController:
                                              sectionProjetController,
                                          tachesController: tachesController,
                                          versementController:
                                              versementController,
                                          personnelsRolesController:
                                              personnelsRolesController,
                                          profilController: profilController,
                                          networkController: networkController,
                                          monnaieStorage: monnaieStorage,
                                          state: state))
                                ],
                              ),
                            )
                          ],
                        ))))
          ],
        ));
  }

  SpeedDial speedialWidget(TachesController tachesController,
      PersonnelsRolesController personnelsRolesController) {
    return SpeedDial(
      closedForegroundColor: themeColor,
      openForegroundColor: Colors.white,
      closedBackgroundColor: themeColor,
      openBackgroundColor: themeColor,
      speedDialChildren: <SpeedDialChild>[
        (widget.projetModel.approbationDG == "-" ||
                widget.projetModel.approbationDD == "-" ||
                widget.projetModel.approbationBudget == "-" ||
                widget.projetModel.approbationFin == "-")
            ? SpeedDialChild(
                child: const Icon(Icons.monetization_on),
                foregroundColor: Colors.white,
                backgroundColor: Colors.green.shade700,
                label: 'Versement',
                onPressed: () {
                  Get.toNamed(ExploitationRoutes.expVersementAdd,
                      arguments: widget.projetModel);
                },
              )
            : SpeedDialChild(
                child: const Icon(Icons.monetization_on),
                foregroundColor: Colors.white,
                backgroundColor: Colors.green.shade700,
                label: 'Pas encore approuvé',
                onPressed: () {},
              ),
        SpeedDialChild(
            child: const Icon(Icons.content_paste_sharp),
            foregroundColor: Colors.white,
            backgroundColor: Colors.blue.shade700,
            label: 'Nouvelle tache',
            onPressed: () {
              showModalBottomSheet<void>(
                context: context,
                isScrollControlled: true,
                useRootNavigator: true,
                builder: (BuildContext context) {
                  return Container(
                    color: Colors.amber.shade100,
                    padding: const EdgeInsets.all(p20),
                    child: ListView(
                      shrinkWrap: true,
                      children: [
                        Form(
                          key: tachesController.formKey,
                          child: Column(
                            mainAxisSize: MainAxisSize.min,
                            children: <Widget>[
                              Row(
                                children: [
                                  Expanded(
                                      child: Text("Créer la tâche",
                                          style: Theme.of(context)
                                              .textTheme
                                              .headlineSmall)),
                                ],
                              ),
                              const SizedBox(
                                height: p20,
                              ),
                              agentWidget(
                                  tachesController, personnelsRolesController),
                              jalonControllerWidget(tachesController),
                              tacheControllerWidget(tachesController),
                              const SizedBox(
                                height: p20,
                              ),
                              const SizedBox(
                                height: p20,
                              ),
                              BtnWidget(
                                  title: 'Soumettre',
                                  press: () {
                                    final form =
                                        tachesController.formKey.currentState!;
                                    if (form.validate()) {
                                      tachesController.submit(
                                          widget.projetModel.nomProjet,
                                          tachesController.tachesList.length,
                                          widget.projetModel.id!,
                                          'Exploitations');
                                      form.reset();
                                    }
                                  },
                                  isLoading: tachesController.isLoading)
                            ],
                          ),
                        ),
                      ],
                    ),
                  );
                },
              );
            })
      ],
      child: const Icon(Icons.menu, color: Colors.white),
    );
  }

  Widget agentWidget(TachesController tachesController,
      PersonnelsRolesController personnelsRolesController) {
    var agentList = personnelsRolesController.personnelsRoleList
        .map((e) => e.agent)
        .toList();
    return Container(
      margin: const EdgeInsets.only(bottom: p20),
      child: DropdownButtonFormField<String>(
        decoration: InputDecoration(
          labelText: 'Personnel',
          labelStyle: const TextStyle(),
          border: OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
          contentPadding: const EdgeInsets.only(left: 5.0),
        ),
        value: tachesController.agent,
        isExpanded: true,
        items: agentList.map((String value) {
          return DropdownMenuItem<String>(
            value: value,
            child: Text(value),
          );
        }).toList(),
        validator: (value) => value == null ? "Select personnel" : null,
        onChanged: (value) {
          setState(() {
            tachesController.agent = value!;
          });
        },
      ),
    );
  }

  Widget jalonControllerWidget(TachesController tachesController) {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: tachesController.jalonController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Jalon',
          ),
          keyboardType: TextInputType.multiline,
          minLines: 1,
          maxLines: 3,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget tacheControllerWidget(TachesController tachesController) {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: tachesController.tacheController,
          keyboardType: TextInputType.multiline,
          minLines: 5,
          maxLines: 10,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Tâches',
          ),
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }
}
