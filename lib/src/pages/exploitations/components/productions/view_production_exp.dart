import 'package:flutter/material.dart'; 
import 'package:intl/intl.dart'; 
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:wm_solution/src/helpers/monnaire_storage.dart';
import 'package:wm_solution/src/models/exploitations/fourniseur_model.dart';
import 'package:wm_solution/src/models/exploitations/production_model.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';
import 'package:wm_solution/src/pages/exploitations/components/productions/table_fournisseurs_prod.dart';
import 'package:wm_solution/src/pages/exploitations/components/productions/approbation_production_exp.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/fournisseur_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/production_exp_controller.dart';
import 'package:wm_solution/src/routes/routes.dart'; 
import 'package:wm_solution/src/widgets/responsive_child3_widget.dart';
import 'package:wm_solution/src/widgets/responsive_child_widget.dart';
import 'package:wm_solution/src/widgets/title_widget.dart';

class ViewProductionExp extends StatefulWidget {
  const ViewProductionExp(
      {super.key,
      required this.productionModel,
      required this.state,
      required this.controller,
      required this.fourniseurController,
      required this.monnaieStorage,
      required this.profilController});
  final ProductionModel productionModel;
  final List<FournisseurModel> state;
  final ProductionExpController controller;
  final FourniseurController fourniseurController;
  final MonnaieStorage monnaieStorage;
  final ProfilController profilController;

  @override
  State<ViewProductionExp> createState() => _ViewProductionExpState();
}

class _ViewProductionExpState extends State<ViewProductionExp> {
  Future<ProductionModel> refresh() async {
    final ProductionModel dataItem =
        await widget.controller.detailView(widget.productionModel.id!);
    return dataItem;
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        Card(
          elevation: 3,
          child: Padding(
            padding: const EdgeInsets.all(p20),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    if (!Responsive.isMobile(context))
                    const TitleWidget(title: "Production"),
                    Column(
                      children: [
                        IconButton(
                            tooltip: 'Actualiser',
                            onPressed: () async {
                              refresh().then((value) => Navigator.pushNamed(
                                  context, ExploitationRoutes.expProdDetail,
                                  arguments: value));
                            },
                            icon:
                                const Icon(Icons.refresh, color: Colors.green)),
                        SelectableText(
                            DateFormat("dd-MM-yyyy HH:mm")
                                .format(widget.productionModel.created),
                            textAlign: TextAlign.start),
                      ],
                    ),
                  ],
                ),
                const SizedBox(height: p20),
                dataWidget(),
                total(),
                const SizedBox(height: p20)
              ],
            ),
          ),
        ),
        const SizedBox(height: p20),
        TableFournisseurProd(
            controller: widget.fourniseurController,
            fournisseurList: widget.state
                .where((p0) => p0.reference == widget.productionModel.id!)
                .toList()),
        const SizedBox(height: p20),
        ApprobationProductionExp(
            data: widget.productionModel,
            controller: widget.controller,
            profilController: widget.profilController),
        const SizedBox(height: p20),
      ],
    );
  }

  Widget total() {
    final headline6 = Theme.of(context).textTheme.headline6;
    double quantityProduiteTotal = 0.0;
    double totalPourcent = 0.0;
    double totalCoutFournisseur = 0.0;

    quantityProduiteTotal = double.parse(widget.productionModel.quantityBonne) +
        double.parse(widget.productionModel.quantityMauvaise);

    totalPourcent = double.parse(widget.productionModel.quantityBonne) *
        100 /
        quantityProduiteTotal;

    var coutFournisseurs = widget.fourniseurController.fournisseurList
        .where((p0) => p0.reference == widget.productionModel.id!)
        .toList();

    for (var element in coutFournisseurs) {
      totalCoutFournisseur +=
          double.parse(element.prixUnitaire) * double.parse(element.quantity);
    }

    return ResponsiveChild3Widget(
        child1: Column(
          children: [
            const Text("Total qté Produite",
                style: TextStyle(fontWeight: FontWeight.bold)),
            SelectableText(
                NumberFormat.decimalPattern('fr').format(quantityProduiteTotal),
                textAlign: TextAlign.center,
                style: headline6),
          ],
        ),
        child2: Container(
          padding: const EdgeInsets.symmetric(horizontal: p20),
          decoration: BoxDecoration(
              border: Border(
            left: BorderSide(
              color: mainColor,
              width: 2,
            ),
          )),
          child: Column(
            children: [
              const Text("Coût total producton",
                  style: TextStyle(fontWeight: FontWeight.bold)),
              Text(
                  "${NumberFormat.decimalPattern('fr').format(totalCoutFournisseur)} ${widget.monnaieStorage.monney}",
                  textAlign: TextAlign.center,
                  maxLines: 1,
                  style: headline6!.copyWith(color: Colors.orange.shade700)),
            ],
          ),
        ),
        child3: Container(
          padding: const EdgeInsets.symmetric(horizontal: p20),
          decoration: BoxDecoration(
              border: Border(
            left: BorderSide(
              color: mainColor,
              width: 2,
            ),
          )),
          child: Column(
            children: [
              const Text("Qté Exploitable en %",
                  style: TextStyle(fontWeight: FontWeight.bold)),
              Text(
                  "${NumberFormat.decimalPattern('fr').format(totalPourcent)} %",
                  textAlign: TextAlign.center,
                  maxLines: 1,
                  style: headline6.copyWith(color: Colors.orange.shade700)),
            ],
          ),
        ));
  }

  Widget dataWidget() {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    var unite = widget.productionModel.idProduct.split('-').last;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          ResponsiveChildWidget(
              child1: Text('Identifiant :',
                  textAlign: TextAlign.start,
                  style: bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.productionModel.idProduct,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              child1: Text('Quantité à Produire :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.productionModel.quantityAProduire))} $unite",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              child1: Text('Quantité exploitable :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.productionModel.quantityBonne))} $unite",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              child1: Text('Quantité non exploitable :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.productionModel.quantityMauvaise))} $unite",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              child1: Text('Signature :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.productionModel.signature,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
        ],
      ),
    );
  }

  
}
