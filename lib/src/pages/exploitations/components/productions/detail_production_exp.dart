import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:simple_speed_dial/simple_speed_dial.dart';
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:wm_solution/src/helpers/monnaire_storage.dart';
import 'package:wm_solution/src/models/exploitations/production_model.dart';
import 'package:wm_solution/src/navigation/drawer/drawer_menu.dart';
import 'package:wm_solution/src/navigation/header/header_bar.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';
import 'package:wm_solution/src/pages/exploitations/components/productions/stats_production_exp.dart';
import 'package:wm_solution/src/pages/exploitations/components/productions/view_production_exp.dart';
import 'package:wm_solution/src/pages/marketing/controller/annuaire/annuaire_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/fournisseur_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/production_exp_controller.dart';
import 'package:wm_solution/src/widgets/btn_widget.dart';
import 'package:wm_solution/src/widgets/loading.dart';
import 'package:wm_solution/src/widgets/responsive_child_widget.dart';
import 'package:wm_solution/src/widgets/title_widget.dart';

class DetailProductionExp extends StatefulWidget {
  const DetailProductionExp({super.key, required this.productionModel});
  final ProductionModel productionModel;

  @override
  State<DetailProductionExp> createState() => _DetailProductionExpState();
}

class _DetailProductionExpState extends State<DetailProductionExp> {
  final MonnaieStorage monnaieStorage = Get.put(MonnaieStorage());
  final ProductionExpController controller = Get.find();
  final FourniseurController fourniseurController = Get.find();
  final AnnuaireController annuaireController = Get.find();
  final ProfilController profilController = Get.find();

  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey();
  String title = "Exploitation";

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        key: scaffoldKey,
        appBar: headerBar(
            context, scaffoldKey, title, widget.productionModel.idProduct),
        drawer: const DrawerMenu(),
        floatingActionButton: speedialWidget(),
        body: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Visibility(
                visible: !Responsive.isMobile(context),
                child: const Expanded(flex: 1, child: DrawerMenu())),
            Expanded(
                flex: 5,
                child: fourniseurController.obx(
                    onLoading: loadingPage(context),
                    onEmpty: const Text('Aucune donnée'),
                    onError: (error) => loadingError(context, error!),
                    (state) => DefaultTabController(
                        length: 2,
                        child: ListView(
                          shrinkWrap: true,
                          children: [
                            const SizedBox(
                              height: 30,
                              child: TabBar(
                                physics: ScrollPhysics(),
                                tabs: [Tab(text: "View"), Tab(text: "Stats")],
                              ),
                            ),
                            Container(
                              margin: const EdgeInsets.only(
                                  top: p20, bottom: p8, right: p20, left: p20),
                              decoration: const BoxDecoration(
                                  borderRadius:
                                      BorderRadius.all(Radius.circular(20))),
                              constraints: BoxConstraints(
                                  maxHeight:
                                      MediaQuery.of(context).size.height),
                              child: TabBarView(
                                physics: const ScrollPhysics(),
                                children: [
                                  SingleChildScrollView(
                                      child: ViewProductionExp(
                                          productionModel:
                                              widget.productionModel,
                                          state: state!,
                                          controller: controller,
                                          fourniseurController:
                                              fourniseurController,
                                          monnaieStorage: monnaieStorage,
                                          profilController: profilController)),
                                  SingleChildScrollView(
                                      child: StatsProductionExp(
                                          productionModel:
                                              widget.productionModel,
                                          state: state,
                                          controller: controller,
                                          fourniseurController:
                                              fourniseurController,
                                          monnaieStorage: monnaieStorage,
                                          profilController: profilController))
                                ],
                              ),
                            )
                          ],
                        ))))
          ],
        ));
  }

  SpeedDial speedialWidget() {
    var unite = widget.productionModel.idProduct.split('-').last;
    return SpeedDial(
      closedForegroundColor: themeColor,
      openForegroundColor: Colors.white,
      closedBackgroundColor: themeColor,
      openBackgroundColor: themeColor,
      speedDialChildren: <SpeedDialChild>[
        if (widget.productionModel.status != '0')
        SpeedDialChild(
          child: const Icon(Icons.production_quantity_limits),
          foregroundColor: Colors.white,
          backgroundColor: Colors.green.shade700,
          label: (widget.productionModel.approbationDD == "Approved" &&
                  widget.productionModel.approbationDG == "Approved")
              ? 'Productions final'
              : 'Pas encore approuvée',
          onPressed: () {
            if (widget.productionModel.approbationDD == "Approved" &&
                widget.productionModel.approbationDG == "Approved") {
              addProductionDialog();
            }
          },
        ),
        if (widget.productionModel.status == 'En attente')
        SpeedDialChild(
            child: const Icon(Icons.person_add_alt),
            foregroundColor: Colors.white,
            backgroundColor: Colors.orange.shade700,
            label: 'Ajout Matière première',
            onPressed: () {
              Get.bottomSheet(Scaffold(
                body: SingleChildScrollView(
                  padding: const EdgeInsets.all(p30),
                  child: Form(
                      key: fourniseurController.formKey,
                      child: Column(
                        children: [
                          const TitleWidget(title: "Ajout Matière première"),
                          const SizedBox(height: 20),
                          designationWidget(),
                          Row(
                            children: [
                              Expanded(flex: 3, child: quantityWidget()),
                              const SizedBox(width: p20),
                              Expanded(flex: 1, child: uniteWidget()),
                            ],
                          ),
                          prixUnitaireWidget(),
                          fournisseurWidget(),
                          Obx(() => BtnWidget(
                              title: 'Soumettre',
                              press: () {
                                final form =
                                    fourniseurController.formKey.currentState!;
                                if (form.validate()) {
                                  fourniseurController
                                      .submit(widget.productionModel);
                                  form.reset();
                                }
                              },
                              isLoading: controller.isLoading))  
                        ],
                      )),
                ),
              ));
            }),
        if(widget.productionModel.status == 'Cloturer')
        SpeedDialChild(
            child: const Icon(Icons.shopping_cart_checkout),
            foregroundColor: Colors.white,
            backgroundColor: Colors.blue.shade700,
            label: 'Envoyer vers stock global',
            onPressed: () {
              Get.bottomSheet(Scaffold(
                body: SingleChildScrollView(
                  padding: const EdgeInsets.all(p30),
                  child: Form(
                      key: controller.formStockGlobalKey,
                      child: Column(
                        children: [
                          const TitleWidget(title: "Envoyer vers le stock global"),
                          const SizedBox(height: 20),
                          ResponsiveChildWidget(
                            child1: priceAchatUnitWidget(),
                            child2: prixVenteUnitWidget()),
                          ResponsiveChildWidget(
                            child1: tvaWidget(),
                            child2: Text(
                                "${widget.productionModel.quantityBonne} $unite ",
                                style:
                                    Theme.of(context).textTheme.headline6)),
                          Obx(() => BtnWidget(
                              title: 'Soumettre',
                              press: () {
                                final form =
                                    controller.formStockGlobalKey.currentState!;
                                if (form.validate()) {
                                  controller.submitQtyBonne(widget.productionModel);
                                  form.reset();
                                }
                              },
                              isLoading: controller.isLoading))
                        ],
                      )),
                ),
              ));
            })
      ],
      child: const Icon(
        Icons.menu,
        color: Colors.white,
      ),
    );
  }

  addProductionDialog() {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) {
            return AlertDialog(
              title: Text('Ajouter la Production final',
                  style: TextStyle(color: mainColor)),
              content: SizedBox(
                  height: 400,
                  width: 400,
                  child: Obx(() => controller.isLoading
                      ? loading()
                      : Form(
                          key: controller.formKey,
                          child: Column(
                            children: [
                              const SizedBox(height: 20),
                              quantityBonneWidget(), 
                              statusWidget()
                            ],
                          )))),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.pop(context, 'Cancel'),
                  child: const Text('Annuler'),
                ),
                Obx(() => TextButton(
                  onPressed: () {
                    final form = controller.formKey.currentState!;
                    if (form.validate()) {
                      controller.submitUpdate(widget.productionModel);
                      form.reset();
                    }
                  },
                  child: controller.isLoading ? loadingMini() : const Text('OK'),
                ),)  
              ],
            );
          });
        });
  }

  Widget quantityBonneWidget() {
    var unite = widget.productionModel.idProduct.split('-').last;
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: Row(
          children: [
            Expanded(
              flex: 4,
              child: TextFormField(
                controller: controller.quantityBonneController,
                decoration: InputDecoration(
                  border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(10.0)),
                  labelText: 'Quantité exploitable',
                ),
                keyboardType:
                    const TextInputType.numberWithOptions(decimal: true),
                inputFormatters: [
                  FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
                ],
                style: const TextStyle(),
                validator: (value) {
                  if (value != null && value.isEmpty) {
                    return 'Ce champs est obligatoire';
                  } else {
                    return null;
                  }
                },
              ),
            ),
            const SizedBox(width: p5),
            Expanded(flex: 2, child: Text(unite, style: Theme.of(context).textTheme.bodyLarge))
          ],
        ));
  }

  // Widget quantityMauvaiseWidget() {
  //   return Container(
  //       margin: const EdgeInsets.only(bottom: p20),
  //       child: TextFormField(
  //         controller: controller.quantityMauvaiseController,
  //         decoration: InputDecoration(
  //           border:
  //               OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
  //           labelText: 'Quantité non exploitable',
  //         ),
  //         keyboardType: const TextInputType.numberWithOptions(decimal: true),
  //         inputFormatters: [
  //           FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
  //         ],
  //         style: const TextStyle(),
  //         validator: (value) {
  //           if (value != null && value.isEmpty) {
  //             return 'Ce champs est obligatoire';
  //           } else {
  //             return null;
  //           }
  //         },
  //       ));
  // }

  Widget statusWidget() {
    List<String> dataList = ['Cloturer', 'Annuler'];
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Status',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: controller.statusProd,
          isExpanded: true,
          items: dataList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select Status" : null,
          onChanged: (value) {
            setState(() {
              controller.statusProd = value;
            });
          },
        ));
  }

  Widget designationWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: fourniseurController.designationController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Designation',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget quantityWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: fourniseurController.quantityController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité à fournir',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget uniteWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Unité',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: fourniseurController.fournisseur,
          isExpanded: true,
          items: fourniseurController.uniteList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select Unité" : null,
          onChanged: (value) {
            setState(() {
              fourniseurController.unite = value;
            });
          },
        ));
  }

  Widget prixUnitaireWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: fourniseurController.prixUnitaireController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Prix Unitaire',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget fournisseurWidget() {
    List<String> dataList = [];
    dataList =
        annuaireController.annuaireList.where((element) => element.categorie == 'Fournisseur')
        .map((e) => e.nomPostnomPrenom).toList();
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Fournisseur',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: fourniseurController.fournisseur,
          isExpanded: true,
          items: dataList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select fournisseur" : null,
          onChanged: (value) {
            setState(() {
              fourniseurController.fournisseur = value;
            });
          },
        ));
  }



  Widget priceAchatUnitWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: controller.priceAchatUnitController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: "Prix d'Achat Unitaire",
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget prixVenteUnitWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: controller.prixVenteUnitController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: "Prix de Vente Unitaire",
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget tvaWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: controller.tvaController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: "TVA en %",
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }
}
