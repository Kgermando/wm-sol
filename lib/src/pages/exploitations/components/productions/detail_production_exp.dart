import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:simple_speed_dial/simple_speed_dial.dart';
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:wm_solution/src/helpers/monnaire_storage.dart';
import 'package:wm_solution/src/models/exploitations/production_model.dart';
import 'package:wm_solution/src/navigation/drawer/drawer_menu.dart';
import 'package:wm_solution/src/navigation/header/header_bar.dart';
import 'package:wm_solution/src/pages/auth/controller/profil_controller.dart';
import 'package:wm_solution/src/pages/exploitations/components/productions/table_fournisseurs_prod.dart';
import 'package:wm_solution/src/pages/marketing/controller/annuaire/annuaire_controller.dart';
import 'package:wm_solution/src/pages/exploitations/components/productions/approbation_production_exp.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/fournisseur_controller.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/production_exp_controller.dart';
import 'package:wm_solution/src/widgets/btn_widget.dart';
import 'package:wm_solution/src/widgets/loading.dart';
import 'package:wm_solution/src/widgets/responsive_child3_widget.dart';
import 'package:wm_solution/src/widgets/responsive_child_widget.dart';
import 'package:wm_solution/src/widgets/title_widget.dart';

class DetailProductionExp extends StatefulWidget {
  const DetailProductionExp({super.key, required this.productionModel});
  final ProductionModel productionModel;

  @override
  State<DetailProductionExp> createState() => _DetailProductionExpState();
}

class _DetailProductionExpState extends State<DetailProductionExp> {
  final MonnaieStorage monnaieStorage = Get.put(MonnaieStorage());
  final ProductionExpController controller = Get.find();
  final FourniseurController fourniseurController = Get.find();
  final AnnuaireController annuaireController = Get.find();
  final ProfilController profilController = Get.find();

  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey();
  String title = "Exploitation";

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: scaffoldKey,
      appBar: headerBar(
          context, scaffoldKey, title, widget.productionModel.idProduct),
      drawer: const DrawerMenu(),
      floatingActionButton: speedialWidget(),
      body: fourniseurController.obx(
          onLoading: loadingPage(context),
          onEmpty: const Text('Aucune donnée'),
          onError: (error) => loadingError(context, error!),
          (state) => Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Visibility(
                      visible: !Responsive.isMobile(context),
                      child: const Expanded(flex: 1, child: DrawerMenu())),
                  Expanded(
                      flex: 5,
                      child: SingleChildScrollView(
                          controller: controller.scrollControllerProdExp,
                          physics: const ScrollPhysics(),
                          child: Container(
                            margin: const EdgeInsets.only(
                                top: p20, bottom: p8, right: p20, left: p20),
                            decoration: const BoxDecoration(
                                borderRadius:
                                    BorderRadius.all(Radius.circular(20))),
                            child: Column(
                              children: [
                                Card(
                                  elevation: 3,
                                  child: Padding(
                                    padding: const EdgeInsets.all(p20),
                                    child: Column(
                                      crossAxisAlignment:
                                          CrossAxisAlignment.start,
                                      children: [
                                        Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.spaceBetween,
                                          children: [
                                            if (!Responsive.isMobile(context))
                                              TitleWidget(
                                                  title: widget.productionModel
                                                      .idProduct),
                                            SelectableText(
                                                DateFormat("dd-MM-yyyy HH:mm")
                                                    .format(widget
                                                        .productionModel
                                                        .created),
                                                textAlign: TextAlign.start),
                                          ],
                                        ),
                                        const SizedBox(height: p20),
                                        dataWidget(),
                                        total(),
                                        const SizedBox(height: p20)
                                      ],
                                    ),
                                  ),
                                ),
                                const SizedBox(height: p20),
                                TableFournisseurProd(
                                    controller: fourniseurController,
                                    fournisseurList: state!
                                        .where((p0) =>
                                            p0.reference ==
                                            widget.productionModel.id!)
                                        .toList()),
                                const SizedBox(height: p20),
                                ApprobationProductionExp(
                                    data: widget.productionModel,
                                    controller: controller,
                                    profilController: profilController),
                                const SizedBox(height: p20),
                              ],
                            ),
                          )))
                ],
              )),
    );
  }

  Widget total() {
    final headline6 = Theme.of(context).textTheme.headline6;
    double quantityProduiteTotal = 0.0;
    double totalPourcent = 0.0;
    double totalCoutFournisseur = 0.0;

    quantityProduiteTotal = double.parse(widget.productionModel.quantityBonne) +
        double.parse(widget.productionModel.quantityMauvaise);

    totalPourcent = double.parse(widget.productionModel.quantityBonne) *
        100 /
        quantityProduiteTotal;

    var coutFournisseurs = fourniseurController.fournisseurList
        .where((p0) => p0.reference == widget.productionModel.id!)
        .toList();

    for (var element in coutFournisseurs) {
      totalCoutFournisseur +=
          double.parse(element.prixUnitaire) * double.parse(element.quantity);
    }

    return ResponsiveChild3Widget(
        child1: Column(
          children: [
            const Text("Total qté Produite",
                style: TextStyle(fontWeight: FontWeight.bold)),
            SelectableText(
                NumberFormat.decimalPattern('fr').format(quantityProduiteTotal),
                textAlign: TextAlign.center,
                style: headline6),
          ],
        ),
        child2: Container(
          padding: const EdgeInsets.symmetric(horizontal: p20),
          decoration: BoxDecoration(
              border: Border(
            left: BorderSide(
              color: mainColor,
              width: 2,
            ),
          )),
          child: Column(
            children: [
              const Text("Coût total producton",
                  style: TextStyle(fontWeight: FontWeight.bold)),
              Text(
                  "${NumberFormat.decimalPattern('fr').format(totalCoutFournisseur)} ${monnaieStorage.monney}",
                  textAlign: TextAlign.center,
                  maxLines: 1,
                  style: headline6!.copyWith(color: Colors.orange.shade700)),
            ],
          ),
        ),
        child3: Container(
          padding: const EdgeInsets.symmetric(horizontal: p20),
          decoration: BoxDecoration(
              border: Border(
            left: BorderSide(
              color: mainColor,
              width: 2,
            ),
          )),
          child: Column(
            children: [
              const Text("Qté Exploitable en %",
                  style: TextStyle(fontWeight: FontWeight.bold)),
              Text(
                  "${NumberFormat.decimalPattern('fr').format(totalPourcent)} %",
                  textAlign: TextAlign.center,
                  maxLines: 1,
                  style: headline6.copyWith(color: Colors.orange.shade700)),
            ],
          ),
        ));
  }

  Widget dataWidget() {
    final bodyMedium = Theme.of(context).textTheme.bodyMedium;
    var unite = widget.productionModel.idProduct.split('-').last;
    return Padding(
      padding: const EdgeInsets.all(p10),
      child: Column(
        children: [
          ResponsiveChildWidget(
              child1: Text('Identifiant :',
                  textAlign: TextAlign.start,
                  style: bodyMedium!.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.productionModel.idProduct,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              child1: Text('Quantité à Produire :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.productionModel.quantityAProduire))} $unite",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              child1: Text('Quantité exploitable :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.productionModel.quantityBonne))} $unite",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              child1: Text('Quantité non exploitable :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(
                  "${NumberFormat.decimalPattern('fr').format(double.parse(widget.productionModel.quantityMauvaise))} $unite",
                  textAlign: TextAlign.justify,
                  style: bodyMedium)),
          Divider(color: mainColor),
          ResponsiveChildWidget(
              child1: Text('Signature :',
                  textAlign: TextAlign.start,
                  style: bodyMedium.copyWith(fontWeight: FontWeight.bold)),
              child2: SelectableText(widget.productionModel.signature,
                  textAlign: TextAlign.justify, style: bodyMedium)),
          Divider(color: mainColor),
        ],
      ),
    );
  }

  SpeedDial speedialWidget() {
    return SpeedDial(
      closedForegroundColor: themeColor,
      openForegroundColor: Colors.white,
      closedBackgroundColor: themeColor,
      openBackgroundColor: themeColor,
      speedDialChildren: <SpeedDialChild>[
        SpeedDialChild(
          child: const Icon(Icons.production_quantity_limits),
          foregroundColor: Colors.white,
          backgroundColor: Colors.green.shade700,
          label: (widget.productionModel.approbationDD == "Approved" &&
                  widget.productionModel.approbationDG == "Approved")
              ? 'Productions final'
              : 'Pas encore approuvée',
          onPressed: () {
            if (widget.productionModel.approbationDD == "Approved" &&
                widget.productionModel.approbationDG == "Approved") {
              addProductionDialog();
            }
          },
        ),
        SpeedDialChild(
            child: const Icon(Icons.person_add_alt),
            foregroundColor: Colors.white,
            backgroundColor: Colors.blue.shade700,
            label: 'Ajout fournisseurs',
            onPressed: () {
              Get.bottomSheet(Scaffold(
                body: SingleChildScrollView(
                  padding: const EdgeInsets.all(p30),
                  child: Form(
                      key: fourniseurController.formKey,
                      child: Column(
                        children: [
                          const TitleWidget(title: "Ajout fournisseur"),
                          const SizedBox(height: 20),
                          designationWidget(),
                          Row(
                            children: [
                              Expanded(flex: 3, child: quantityWidget()),
                              const SizedBox(width: p20),
                              Expanded(flex: 1, child: uniteWidget()),
                            ],
                          ),
                          prixUnitaireWidget(),
                          fournisseurWidget(),
                          BtnWidget(
                              title: 'Soumettre',
                              press: () {
                                final form =
                                    fourniseurController.formKey.currentState!;
                                if (form.validate()) {
                                  fourniseurController
                                      .submit(widget.productionModel);
                                  form.reset();
                                }
                              },
                              isLoading: controller.isLoading)
                        ],
                      )),
                ),
              ));
            })
      ],
      child: const Icon(
        Icons.menu,
        color: Colors.white,
      ),
    );
  }

  addProductionDialog() {
    return showDialog(
        context: context,
        barrierDismissible: true,
        builder: (context) {
          return StatefulBuilder(builder: (context, StateSetter setState) {
            return AlertDialog(
              title: Text('Ajouter la Production final',
                  style: TextStyle(color: mainColor)),
              content: SizedBox(
                  height: 400,
                  width: 300,
                  child: controller.isLoading
                      ? loading()
                      : Form(
                          key: controller.formKey,
                          child: Column(
                            children: [
                              const SizedBox(height: 20),
                              quantityBonneWidget(),
                              quantityMauvaiseWidget(),
                              // coutProductionWidget(),
                              statusWidget()
                            ],
                          ))),
              actions: <Widget>[
                TextButton(
                  onPressed: () => Navigator.pop(context, 'Cancel'),
                  child: const Text('Annuler'),
                ),
                TextButton(
                  onPressed: () {
                    final form = controller.formKey.currentState!;
                    if (form.validate()) {
                      controller.submitUpdate(widget.productionModel);
                      form.reset();
                    }
                  },
                  child: const Text('OK'),
                ),
              ],
            );
          });
        });
  }

  Widget quantityBonneWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: controller.quantityBonneController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité exploitable',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget quantityMauvaiseWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: controller.quantityMauvaiseController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité non exploitable',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget statusWidget() {
    List<String> dataList = ['Terminer', 'Annuler'];
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Fournisseur',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: controller.statusProd,
          isExpanded: true,
          items: dataList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select Status" : null,
          onChanged: (value) {
            setState(() {
              controller.statusProd = value;
            });
          },
        ));
  }

  Widget designationWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: fourniseurController.designationController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Designation',
          ),
          keyboardType: TextInputType.text,
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget quantityWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: fourniseurController.quantityController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Quantité à fournir',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget uniteWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Unité',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: fourniseurController.fournisseur,
          isExpanded: true,
          items: fourniseurController.uniteList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select Unité" : null,
          onChanged: (value) {
            setState(() {
              fourniseurController.unite = value;
            });
          },
        ));
  }

  Widget prixUnitaireWidget() {
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: TextFormField(
          controller: fourniseurController.prixUnitaireController,
          decoration: InputDecoration(
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(10.0)),
            labelText: 'Prix Unitaire',
          ),
          keyboardType: const TextInputType.numberWithOptions(decimal: true),
          inputFormatters: [
            FilteringTextInputFormatter.allow(RegExp(r'^\d*\.?\d{0,2}')),
          ],
          style: const TextStyle(),
          validator: (value) {
            if (value != null && value.isEmpty) {
              return 'Ce champs est obligatoire';
            } else {
              return null;
            }
          },
        ));
  }

  Widget fournisseurWidget() {
    List<String> dataList = [];
    dataList =
        annuaireController.annuaireList.map((e) => e.nomPostnomPrenom).toList();
    return Container(
        margin: const EdgeInsets.only(bottom: p20),
        child: DropdownButtonFormField<String>(
          decoration: InputDecoration(
            labelText: 'Fournisseur',
            labelStyle: const TextStyle(),
            border:
                OutlineInputBorder(borderRadius: BorderRadius.circular(5.0)),
            contentPadding: const EdgeInsets.only(left: 5.0),
          ),
          value: fourniseurController.fournisseur,
          isExpanded: true,
          items: dataList
              .map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              })
              .toSet()
              .toList(),
          validator: (value) => value == null ? "Select fournisseur" : null,
          onChanged: (value) {
            setState(() {
              fourniseurController.fournisseur = value;
            });
          },
        ));
  }
}
