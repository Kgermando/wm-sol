import 'package:flutter/material.dart';
import 'package:wm_solution/src/constants/app_theme.dart';
import 'package:wm_solution/src/constants/responsive.dart';
import 'package:syncfusion_flutter_charts/charts.dart';
import 'package:wm_solution/src/models/charts/chart_multi.dart';
import 'package:wm_solution/src/pages/exploitations/controller/production/production_exp_controller.dart';

class ChartProduction extends StatefulWidget {
  const ChartProduction({Key? key, required this.controller}) : super(key: key);
  final ProductionExpController controller;

  @override
  State<ChartProduction> createState() => _ChartProductionState();
}

class _ChartProductionState extends State<ChartProduction> {
  TooltipBehavior? _tooltipBehavior;

  @override
  void initState() {
    _tooltipBehavior = TooltipBehavior(enable: true);
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 6,
      child: Padding(
        padding: const EdgeInsets.all(p8),
        child: Material(elevation: 10.0, child: _buildAnimationLineChart()),
      ),
    );
  }

  /// Get the cartesian chart with line series
  SfCartesianChart _buildAnimationLineChart() {
    final headline6 = Theme.of(context).textTheme.headline6;
    return SfCartesianChart(
        title: ChartTitle(
            text: "Qualité de production",
            textStyle: headline6!.copyWith(fontWeight: FontWeight.bold)),
        plotAreaBorderWidth: 0,
        tooltipBehavior: _tooltipBehavior,
        legend: Legend(
            isVisible: true,
            isResponsive: true,
            position: Responsive.isDesktop(context)
                ? LegendPosition.right
                : LegendPosition.bottom),
        primaryXAxis: CategoryAxis(isVisible: true),
        primaryYAxis: NumericAxis(
          edgeLabelPlacement: EdgeLabelPlacement.shift,
          title: AxisTitle(text: 'Production'),
          // numberFormat: NumberFormat.currency(symbol: '\$ ', decimalDigits: 1),
        ),
        series: <ChartSeries<ChartProductionModel, String>>[
          ColumnSeries<ChartProductionModel, String>(
            dataSource: widget.controller.chartProductionList,
            xValueMapper: (ChartProductionModel data, _) => data.idProduct,
            yValueMapper: (ChartProductionModel data, _) => data.qtyTotal,
            name: 'Qté Total',
            color: Colors.blue.shade700,
            dataLabelSettings: const DataLabelSettings(isVisible: true),
          ),
          ColumnSeries<ChartProductionModel, String>(
            dataSource: widget.controller.chartProductionList,
            xValueMapper: (ChartProductionModel data, _) => data.idProduct,
            yValueMapper: (ChartProductionModel data, _) => data.qtyBonne,
            name: 'Qté Bonne',
            color: Colors.teal.shade700,
            dataLabelSettings: const DataLabelSettings(isVisible: true),
          ),
          ColumnSeries<ChartProductionModel, String>(
            dataSource: widget.controller.chartProductionList,
            xValueMapper: (ChartProductionModel data, _) => data.idProduct,
            yValueMapper: (ChartProductionModel data, _) => data.qtyMauvaise,
            name: 'Qté Mauvaise',
            color: Colors.red.shade700,
            dataLabelSettings: const DataLabelSettings(isVisible: true),
          ),
        ]);
  }
}
